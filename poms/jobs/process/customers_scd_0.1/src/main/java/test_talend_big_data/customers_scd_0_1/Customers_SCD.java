// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package test_talend_big_data.customers_scd_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Customers_SCD Purpose: <br>
 * Description: <br>
 * 
 * @author prakit.si@yipintsoi.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Customers_SCD implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (isInit != null) {

				this.setProperty("isInit", isInit.toString());

			}

		}

		public Integer isInit;

		public Integer getIsInit() {
			return this.isInit;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Customers_SCD";
	private final String projectName = "TEST_TALEND_BIG_DATA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Customers_SCD.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Customers_SCD.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tDBRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCSCDELT_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tJDBCSCDELT_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnSubjobError1", 0, "error");
			}

			errorCode = null;
			tDBClose_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tDBRow_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnSubjobError2", 0, "error");
			}

			errorCode = null;
			tDBClose_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnSubjobError3", 0, "error");
			}

			errorCode = null;
			tDBClose_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tJDBCSCDELT_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnSubjobError4", 0, "error");
			}

			errorCode = null;
			tDBClose_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnSubjobError5", 0, "error");
			}

			errorCode = null;
			tDBClose_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tDBClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				org.talend.components.api.component.ComponentDefinition def_tDBConnection_1 = new org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionDefinition();

				org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties props_tDBConnection_1 = (org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties) def_tDBConnection_1
						.createRuntimeProperties();
				props_tDBConnection_1.setValue("shareConnection", false);

				props_tDBConnection_1.setValue("useDataSource", false);

				props_tDBConnection_1.setValue("useAutoCommit", true);

				props_tDBConnection_1.setValue("autocommit", false);

				props_tDBConnection_1.connection.setValue("jdbcUrl",
						"jdbc:snowflake://jp37205.southeast-asia.azure.snowflakecomputing.com/?db=demo_db&schema=public");

				props_tDBConnection_1.connection.setValue("driverClass", "net.snowflake.client.jdbc.SnowflakeDriver");

				java.util.List<Object> tDBConnection_1_connection_driverTable_drivers = new java.util.ArrayList<Object>();

				tDBConnection_1_connection_driverTable_drivers.add("mvn:net.snowflake/snowflake-jdbc/3.11.1/jar");

				((org.talend.daikon.properties.Properties) props_tDBConnection_1.connection.driverTable)
						.setValue("drivers", tDBConnection_1_connection_driverTable_drivers);

				props_tDBConnection_1.connection.userPassword.setValue("useAuth", false);

				props_tDBConnection_1.connection.userPassword.setValue("userId", "prakitsi");

				props_tDBConnection_1.connection.userPassword.setValue("password",
						routines.system.PasswordEncryptUtil.decryptPassword(
								"enc:routine.encryption.key.v1:Klbi5GtR20nn1UyZjjai0JDeQ699tEOhV0s5xDX2+tk4utpPmw=="));

				globalMap.put("tDBConnection_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBConnection_1);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
				java.net.URL mappings_url_tDBConnection_1 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBConnection_1_MAPPINGS_URL", mappings_url_tDBConnection_1);

				org.talend.components.api.container.RuntimeContainer container_tDBConnection_1 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBConnection_1";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBConnection_1 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBConnection_1 = null;
				topology_tDBConnection_1 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBConnection_1 = def_tDBConnection_1.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBConnection_1,
						topology_tDBConnection_1);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBConnection_1 = def_tDBConnection_1
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBConnection_1 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBConnection_1.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBConnection_1 = componentRuntime_tDBConnection_1
						.initialize(container_tDBConnection_1, props_tDBConnection_1);

				if (initVr_tDBConnection_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBConnection_1.getMessage());
				}

				if (componentRuntime_tDBConnection_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBConnection_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBConnection_1;
					compDriverInitialization_tDBConnection_1.runAtDriver(container_tDBConnection_1);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBConnection_1 = null;
				if (componentRuntime_tDBConnection_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBConnection_1 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBConnection_1;
					org.talend.daikon.properties.ValidationResult vr_tDBConnection_1 = sourceOrSink_tDBConnection_1
							.validate(container_tDBConnection_1);
					if (vr_tDBConnection_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
						throw new RuntimeException(vr_tDBConnection_1.getMessage());
					}
				}

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

// end of generic

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (context.isInit == 1) {

					if (execStat) {
						runStat.updateStatOnConnection("Initial", 0, "true");
					}
					tDBRow_3Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("Initial", 0, "false");
					}
				}
				if (context.isInit != 1) {

					if (execStat) {
						runStat.updateStatOnConnection("Not_Initial", 0, "true");
					}
					tDBRow_1Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("Not_Initial", 0, "false");
					}
				}

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

// finally of generic

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_3 begin ] start
				 */

				ok_Hash.put("tDBRow_3", false);
				start_Hash.put("tDBRow_3", System.currentTimeMillis());

				currentComponent = "tDBRow_3";

				int tos_count_tDBRow_3 = 0;

				org.talend.components.api.component.ComponentDefinition def_tDBRow_3 = new org.talend.components.jdbc.tjdbcrow.TJDBCRowDefinition();

				org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties props_tDBRow_3 = (org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties) def_tDBRow_3
						.createRuntimeProperties();
				props_tDBRow_3.setValue("sql", "DROP SEQUENCE IF EXISTS DEMO_DB.PUBLIC.CUSTOMER_SEQUENCE;");

				props_tDBRow_3.setValue("dieOnError", true);

				props_tDBRow_3.setValue("propagateQueryResultSet", false);

				props_tDBRow_3.setValue("usePreparedStatement", false);

				props_tDBRow_3.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_3.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_3.referencedComponent.setValue("referenceDefinitionName", "tJDBCConnection");

				props_tDBRow_3.connection.userPassword.setValue("useAuth", false);

				class SchemaSettingTool_tDBRow_3_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"CUSTOMERS\",\"fields\":[],\"di.table.name\":\"tDBRow_1\",\"di.table.label\":\"CUSTOMERS\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_3_1_fisrt sst_tDBRow_3_1_fisrt = new SchemaSettingTool_tDBRow_3_1_fisrt();

				props_tDBRow_3.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_3_1_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_3_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"CUSTOMERS\",\"fields\":[],\"di.table.name\":\"tDBRow_1\",\"di.table.label\":\"CUSTOMERS\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_3_2_fisrt sst_tDBRow_3_2_fisrt = new SchemaSettingTool_tDBRow_3_2_fisrt();

				props_tDBRow_3.schemaFlow.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_3_2_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_3_3_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}],\"di.table.name\":\"tDBRow_1\",\"di.table.label\":\"CUSTOMERS\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_3_3_fisrt sst_tDBRow_3_3_fisrt = new SchemaSettingTool_tDBRow_3_3_fisrt();

				props_tDBRow_3.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_3_3_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_3.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_3 = props_tDBRow_3.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_3 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_3 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_3 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_3.referencedComponent.setReference(referencedComponentProperties_tDBRow_3);
					}
				}
				globalMap.put("tDBRow_3_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_3);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
				java.net.URL mappings_url_tDBRow_3 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBRow_3_MAPPINGS_URL", mappings_url_tDBRow_3);

				org.talend.components.api.container.RuntimeContainer container_tDBRow_3 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBRow_3";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBRow_3 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBRow_3 = null;
				topology_tDBRow_3 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_3 = def_tDBRow_3.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_3,
						topology_tDBRow_3);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_3 = def_tDBRow_3
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_3 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBRow_3.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBRow_3 = componentRuntime_tDBRow_3
						.initialize(container_tDBRow_3, props_tDBRow_3);

				if (initVr_tDBRow_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBRow_3.getMessage());
				}

				if (componentRuntime_tDBRow_3 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_3 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBRow_3;
					compDriverInitialization_tDBRow_3.runAtDriver(container_tDBRow_3);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_3 = null;
				if (componentRuntime_tDBRow_3 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBRow_3 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBRow_3;
					org.talend.daikon.properties.ValidationResult vr_tDBRow_3 = sourceOrSink_tDBRow_3
							.validate(container_tDBRow_3);
					if (vr_tDBRow_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
						throw new RuntimeException(vr_tDBRow_3.getMessage());
					}
				}

				/**
				 * [tDBRow_3 begin ] stop
				 */

				/**
				 * [tDBRow_3 main ] start
				 */

				currentComponent = "tDBRow_3";

				tos_count_tDBRow_3++;

				/**
				 * [tDBRow_3 main ] stop
				 */

				/**
				 * [tDBRow_3 process_data_begin ] start
				 */

				currentComponent = "tDBRow_3";

				/**
				 * [tDBRow_3 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_3 process_data_end ] start
				 */

				currentComponent = "tDBRow_3";

				/**
				 * [tDBRow_3 process_data_end ] stop
				 */

				/**
				 * [tDBRow_3 end ] start
				 */

				currentComponent = "tDBRow_3";

// end of generic

				resourceMap.put("finish_tDBRow_3", Boolean.TRUE);

				ok_Hash.put("tDBRow_3", true);
				end_Hash.put("tDBRow_3", System.currentTimeMillis());

				/**
				 * [tDBRow_3 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBRow_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_3 finally ] start
				 */

				currentComponent = "tDBRow_3";

// finally of generic

				if (resourceMap.get("finish_tDBRow_3") == null) {
				}

				/**
				 * [tDBRow_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_3_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_4 begin ] start
				 */

				ok_Hash.put("tDBRow_4", false);
				start_Hash.put("tDBRow_4", System.currentTimeMillis());

				currentComponent = "tDBRow_4";

				int tos_count_tDBRow_4 = 0;

				org.talend.components.api.component.ComponentDefinition def_tDBRow_4 = new org.talend.components.jdbc.tjdbcrow.TJDBCRowDefinition();

				org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties props_tDBRow_4 = (org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties) def_tDBRow_4
						.createRuntimeProperties();
				props_tDBRow_4.setValue("sql", "DROP TABLE IF EXISTS DEMO_DB.PUBLIC.CUSTOMERS;");

				props_tDBRow_4.setValue("dieOnError", true);

				props_tDBRow_4.setValue("propagateQueryResultSet", false);

				props_tDBRow_4.setValue("usePreparedStatement", false);

				props_tDBRow_4.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_4.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_4.referencedComponent.setValue("referenceDefinitionName", "tJDBCConnection");

				props_tDBRow_4.connection.userPassword.setValue("useAuth", false);

				class SchemaSettingTool_tDBRow_4_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"CUSTOMERS\",\"fields\":[],\"di.table.name\":\"tDBRow_1\",\"di.table.label\":\"CUSTOMERS\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_4_1_fisrt sst_tDBRow_4_1_fisrt = new SchemaSettingTool_tDBRow_4_1_fisrt();

				props_tDBRow_4.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_4_1_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_4_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"CUSTOMERS\",\"fields\":[],\"di.table.name\":\"tDBRow_1\",\"di.table.label\":\"CUSTOMERS\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_4_2_fisrt sst_tDBRow_4_2_fisrt = new SchemaSettingTool_tDBRow_4_2_fisrt();

				props_tDBRow_4.schemaFlow.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_4_2_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_4_3_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}],\"di.table.name\":\"tDBRow_1\",\"di.table.label\":\"CUSTOMERS\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_4_3_fisrt sst_tDBRow_4_3_fisrt = new SchemaSettingTool_tDBRow_4_3_fisrt();

				props_tDBRow_4.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_4_3_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_4.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_4 = props_tDBRow_4.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_4 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_4 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_4 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_4.referencedComponent.setReference(referencedComponentProperties_tDBRow_4);
					}
				}
				globalMap.put("tDBRow_4_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_4);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
				java.net.URL mappings_url_tDBRow_4 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBRow_4_MAPPINGS_URL", mappings_url_tDBRow_4);

				org.talend.components.api.container.RuntimeContainer container_tDBRow_4 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBRow_4";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBRow_4 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBRow_4 = null;
				topology_tDBRow_4 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_4 = def_tDBRow_4.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_4,
						topology_tDBRow_4);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_4 = def_tDBRow_4
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_4 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBRow_4.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBRow_4 = componentRuntime_tDBRow_4
						.initialize(container_tDBRow_4, props_tDBRow_4);

				if (initVr_tDBRow_4.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBRow_4.getMessage());
				}

				if (componentRuntime_tDBRow_4 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_4 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBRow_4;
					compDriverInitialization_tDBRow_4.runAtDriver(container_tDBRow_4);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_4 = null;
				if (componentRuntime_tDBRow_4 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBRow_4 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBRow_4;
					org.talend.daikon.properties.ValidationResult vr_tDBRow_4 = sourceOrSink_tDBRow_4
							.validate(container_tDBRow_4);
					if (vr_tDBRow_4.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
						throw new RuntimeException(vr_tDBRow_4.getMessage());
					}
				}

				/**
				 * [tDBRow_4 begin ] stop
				 */

				/**
				 * [tDBRow_4 main ] start
				 */

				currentComponent = "tDBRow_4";

				tos_count_tDBRow_4++;

				/**
				 * [tDBRow_4 main ] stop
				 */

				/**
				 * [tDBRow_4 process_data_begin ] start
				 */

				currentComponent = "tDBRow_4";

				/**
				 * [tDBRow_4 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_4 process_data_end ] start
				 */

				currentComponent = "tDBRow_4";

				/**
				 * [tDBRow_4 process_data_end ] stop
				 */

				/**
				 * [tDBRow_4 end ] start
				 */

				currentComponent = "tDBRow_4";

// end of generic

				resourceMap.put("finish_tDBRow_4", Boolean.TRUE);

				ok_Hash.put("tDBRow_4", true);
				end_Hash.put("tDBRow_4", System.currentTimeMillis());

				/**
				 * [tDBRow_4 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_4:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
			}

			tDBRow_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_4 finally ] start
				 */

				currentComponent = "tDBRow_4";

// finally of generic

				if (resourceMap.get("finish_tDBRow_4") == null) {
				}

				/**
				 * [tDBRow_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_4_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_5 begin ] start
				 */

				ok_Hash.put("tDBRow_5", false);
				start_Hash.put("tDBRow_5", System.currentTimeMillis());

				currentComponent = "tDBRow_5";

				int tos_count_tDBRow_5 = 0;

				org.talend.components.api.component.ComponentDefinition def_tDBRow_5 = new org.talend.components.jdbc.tjdbcrow.TJDBCRowDefinition();

				org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties props_tDBRow_5 = (org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties) def_tDBRow_5
						.createRuntimeProperties();
				props_tDBRow_5.setValue("sql", "DROP TABLE IF EXISTS DEMO_DB.PUBLIC.CUSTOMERS_SCD;");

				props_tDBRow_5.setValue("dieOnError", true);

				props_tDBRow_5.setValue("propagateQueryResultSet", false);

				props_tDBRow_5.setValue("usePreparedStatement", false);

				props_tDBRow_5.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_5.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_5.referencedComponent.setValue("referenceDefinitionName", "tJDBCConnection");

				props_tDBRow_5.connection.userPassword.setValue("useAuth", false);

				class SchemaSettingTool_tDBRow_5_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"CUSTOMERS\",\"fields\":[],\"di.table.name\":\"tDBRow_1\",\"di.table.label\":\"CUSTOMERS\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_5_1_fisrt sst_tDBRow_5_1_fisrt = new SchemaSettingTool_tDBRow_5_1_fisrt();

				props_tDBRow_5.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_5_1_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_5_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"CUSTOMERS\",\"fields\":[],\"di.table.name\":\"tDBRow_1\",\"di.table.label\":\"CUSTOMERS\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_5_2_fisrt sst_tDBRow_5_2_fisrt = new SchemaSettingTool_tDBRow_5_2_fisrt();

				props_tDBRow_5.schemaFlow.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_5_2_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_5_3_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}],\"di.table.name\":\"tDBRow_1\",\"di.table.label\":\"CUSTOMERS\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_5_3_fisrt sst_tDBRow_5_3_fisrt = new SchemaSettingTool_tDBRow_5_3_fisrt();

				props_tDBRow_5.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_5_3_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_5.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_5 = props_tDBRow_5.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_5 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_5 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_5 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_5.referencedComponent.setReference(referencedComponentProperties_tDBRow_5);
					}
				}
				globalMap.put("tDBRow_5_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_5);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
				java.net.URL mappings_url_tDBRow_5 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBRow_5_MAPPINGS_URL", mappings_url_tDBRow_5);

				org.talend.components.api.container.RuntimeContainer container_tDBRow_5 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBRow_5";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBRow_5 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBRow_5 = null;
				topology_tDBRow_5 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_5 = def_tDBRow_5.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_5,
						topology_tDBRow_5);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_5 = def_tDBRow_5
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_5 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBRow_5.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBRow_5 = componentRuntime_tDBRow_5
						.initialize(container_tDBRow_5, props_tDBRow_5);

				if (initVr_tDBRow_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBRow_5.getMessage());
				}

				if (componentRuntime_tDBRow_5 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_5 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBRow_5;
					compDriverInitialization_tDBRow_5.runAtDriver(container_tDBRow_5);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_5 = null;
				if (componentRuntime_tDBRow_5 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBRow_5 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBRow_5;
					org.talend.daikon.properties.ValidationResult vr_tDBRow_5 = sourceOrSink_tDBRow_5
							.validate(container_tDBRow_5);
					if (vr_tDBRow_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
						throw new RuntimeException(vr_tDBRow_5.getMessage());
					}
				}

				/**
				 * [tDBRow_5 begin ] stop
				 */

				/**
				 * [tDBRow_5 main ] start
				 */

				currentComponent = "tDBRow_5";

				tos_count_tDBRow_5++;

				/**
				 * [tDBRow_5 main ] stop
				 */

				/**
				 * [tDBRow_5 process_data_begin ] start
				 */

				currentComponent = "tDBRow_5";

				/**
				 * [tDBRow_5 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_5 process_data_end ] start
				 */

				currentComponent = "tDBRow_5";

				/**
				 * [tDBRow_5 process_data_end ] stop
				 */

				/**
				 * [tDBRow_5 end ] start
				 */

				currentComponent = "tDBRow_5";

// end of generic

				resourceMap.put("finish_tDBRow_5", Boolean.TRUE);

				ok_Hash.put("tDBRow_5", true);
				end_Hash.put("tDBRow_5", System.currentTimeMillis());

				/**
				 * [tDBRow_5 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_5 finally ] start
				 */

				currentComponent = "tDBRow_5";

// finally of generic

				if (resourceMap.get("finish_tDBRow_5") == null) {
				}

				/**
				 * [tDBRow_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_5_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_1 begin ] start
				 */

				ok_Hash.put("tDBRow_1", false);
				start_Hash.put("tDBRow_1", System.currentTimeMillis());

				currentComponent = "tDBRow_1";

				int tos_count_tDBRow_1 = 0;

				org.talend.components.api.component.ComponentDefinition def_tDBRow_1 = new org.talend.components.jdbc.tjdbcrow.TJDBCRowDefinition();

				org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties props_tDBRow_1 = (org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties) def_tDBRow_1
						.createRuntimeProperties();
				props_tDBRow_1.setValue("sql",
						"CREATE TABLE IF NOT EXISTS CUSTOMERS (\n	CUSTOMERID VARCHAR(5) NOT NULL,\n	COMPANYNAME VARCHAR(40) NOT NULL,\n	CONTACTN"
								+ "AME VARCHAR(30),\n	CONTACTTITLE VARCHAR(30),\n	ADDRESS VARCHAR(60),\n	CITY VARCHAR(15),\n	REGION VARCHAR(15),\n	POSTALCO"
								+ "DE VARCHAR(10),\n	COUNTRY VARCHAR(15),\n	PHONE VARCHAR(24),\n	FAX VARCHAR(24)\n);");

				props_tDBRow_1.setValue("dieOnError", true);

				props_tDBRow_1.setValue("propagateQueryResultSet", false);

				props_tDBRow_1.setValue("usePreparedStatement", false);

				props_tDBRow_1.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_1.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_1.referencedComponent.setValue("referenceDefinitionName", "tJDBCConnection");

				props_tDBRow_1.connection.userPassword.setValue("useAuth", false);

				class SchemaSettingTool_tDBRow_1_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"CUSTOMERS\",\"fields\":[],\"di.table.name\":\"tDBRow_1\",\"di.table.label\":\"CUSTOMERS\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_1_1_fisrt sst_tDBRow_1_1_fisrt = new SchemaSettingTool_tDBRow_1_1_fisrt();

				props_tDBRow_1.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_1_1_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_1_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"CUSTOMERS\",\"fields\":[],\"di.table.name\":\"tDBRow_1\",\"di.table.label\":\"CUSTOMERS\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_1_2_fisrt sst_tDBRow_1_2_fisrt = new SchemaSettingTool_tDBRow_1_2_fisrt();

				props_tDBRow_1.schemaFlow.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_1_2_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_1_3_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}],\"di.table.name\":\"tDBRow_1\",\"di.table.label\":\"CUSTOMERS\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_1_3_fisrt sst_tDBRow_1_3_fisrt = new SchemaSettingTool_tDBRow_1_3_fisrt();

				props_tDBRow_1.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_1_3_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_1.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_1 = props_tDBRow_1.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_1 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_1 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_1 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_1.referencedComponent.setReference(referencedComponentProperties_tDBRow_1);
					}
				}
				globalMap.put("tDBRow_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_1);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
				java.net.URL mappings_url_tDBRow_1 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBRow_1_MAPPINGS_URL", mappings_url_tDBRow_1);

				org.talend.components.api.container.RuntimeContainer container_tDBRow_1 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBRow_1";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBRow_1 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBRow_1 = null;
				topology_tDBRow_1 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_1 = def_tDBRow_1.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_1,
						topology_tDBRow_1);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_1 = def_tDBRow_1
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_1 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBRow_1.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBRow_1 = componentRuntime_tDBRow_1
						.initialize(container_tDBRow_1, props_tDBRow_1);

				if (initVr_tDBRow_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBRow_1.getMessage());
				}

				if (componentRuntime_tDBRow_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBRow_1;
					compDriverInitialization_tDBRow_1.runAtDriver(container_tDBRow_1);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_1 = null;
				if (componentRuntime_tDBRow_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBRow_1 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBRow_1;
					org.talend.daikon.properties.ValidationResult vr_tDBRow_1 = sourceOrSink_tDBRow_1
							.validate(container_tDBRow_1);
					if (vr_tDBRow_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
						throw new RuntimeException(vr_tDBRow_1.getMessage());
					}
				}

				/**
				 * [tDBRow_1 begin ] stop
				 */

				/**
				 * [tDBRow_1 main ] start
				 */

				currentComponent = "tDBRow_1";

				tos_count_tDBRow_1++;

				/**
				 * [tDBRow_1 main ] stop
				 */

				/**
				 * [tDBRow_1 process_data_begin ] start
				 */

				currentComponent = "tDBRow_1";

				/**
				 * [tDBRow_1 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_1 process_data_end ] start
				 */

				currentComponent = "tDBRow_1";

				/**
				 * [tDBRow_1 process_data_end ] stop
				 */

				/**
				 * [tDBRow_1 end ] start
				 */

				currentComponent = "tDBRow_1";

// end of generic

				resourceMap.put("finish_tDBRow_1", Boolean.TRUE);

				ok_Hash.put("tDBRow_1", true);
				end_Hash.put("tDBRow_1", System.currentTimeMillis());

				/**
				 * [tDBRow_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tDBRow_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_1 finally ] start
				 */

				currentComponent = "tDBRow_1";

// finally of generic

				if (resourceMap.get("finish_tDBRow_1") == null) {
				}

				/**
				 * [tDBRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_2 begin ] start
				 */

				ok_Hash.put("tDBRow_2", false);
				start_Hash.put("tDBRow_2", System.currentTimeMillis());

				currentComponent = "tDBRow_2";

				int tos_count_tDBRow_2 = 0;

				org.talend.components.api.component.ComponentDefinition def_tDBRow_2 = new org.talend.components.jdbc.tjdbcrow.TJDBCRowDefinition();

				org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties props_tDBRow_2 = (org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties) def_tDBRow_2
						.createRuntimeProperties();
				props_tDBRow_2.setValue("sql", "CREATE SEQUENCE IF NOT EXISTS CUSTOMER_SEQUENCE;");

				props_tDBRow_2.setValue("dieOnError", true);

				props_tDBRow_2.setValue("propagateQueryResultSet", false);

				props_tDBRow_2.setValue("usePreparedStatement", false);

				props_tDBRow_2.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBRow_2.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBRow_2.referencedComponent.setValue("referenceDefinitionName", "tJDBCConnection");

				props_tDBRow_2.connection.userPassword.setValue("useAuth", false);

				class SchemaSettingTool_tDBRow_2_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"CUSTOMERS\",\"fields\":[],\"di.table.name\":\"tDBRow_2\",\"di.table.label\":\"CUSTOMERS\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_2_1_fisrt sst_tDBRow_2_1_fisrt = new SchemaSettingTool_tDBRow_2_1_fisrt();

				props_tDBRow_2.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_2_1_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_2_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"CUSTOMERS\",\"fields\":[],\"di.table.name\":\"tDBRow_2\",\"di.table.label\":\"CUSTOMERS\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_2_2_fisrt sst_tDBRow_2_2_fisrt = new SchemaSettingTool_tDBRow_2_2_fisrt();

				props_tDBRow_2.schemaFlow.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_2_2_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBRow_2_3_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}],\"di.table.name\":\"tDBRow_2\",\"di.table.label\":\"CUSTOMERS\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBRow_2_3_fisrt sst_tDBRow_2_3_fisrt = new SchemaSettingTool_tDBRow_2_3_fisrt();

				props_tDBRow_2.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBRow_2_3_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_2.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBRow_2 = props_tDBRow_2.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBRow_2 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_2 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBRow_2 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBRow_2.referencedComponent.setReference(referencedComponentProperties_tDBRow_2);
					}
				}
				globalMap.put("tDBRow_2_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_2);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
				java.net.URL mappings_url_tDBRow_2 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBRow_2_MAPPINGS_URL", mappings_url_tDBRow_2);

				org.talend.components.api.container.RuntimeContainer container_tDBRow_2 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBRow_2";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBRow_2 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBRow_2 = null;
				topology_tDBRow_2 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_2 = def_tDBRow_2.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_2,
						topology_tDBRow_2);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_2 = def_tDBRow_2
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_2 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBRow_2.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBRow_2 = componentRuntime_tDBRow_2
						.initialize(container_tDBRow_2, props_tDBRow_2);

				if (initVr_tDBRow_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBRow_2.getMessage());
				}

				if (componentRuntime_tDBRow_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBRow_2;
					compDriverInitialization_tDBRow_2.runAtDriver(container_tDBRow_2);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_2 = null;
				if (componentRuntime_tDBRow_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBRow_2 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBRow_2;
					org.talend.daikon.properties.ValidationResult vr_tDBRow_2 = sourceOrSink_tDBRow_2
							.validate(container_tDBRow_2);
					if (vr_tDBRow_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
						throw new RuntimeException(vr_tDBRow_2.getMessage());
					}
				}

				/**
				 * [tDBRow_2 begin ] stop
				 */

				/**
				 * [tDBRow_2 main ] start
				 */

				currentComponent = "tDBRow_2";

				tos_count_tDBRow_2++;

				/**
				 * [tDBRow_2 main ] stop
				 */

				/**
				 * [tDBRow_2 process_data_begin ] start
				 */

				currentComponent = "tDBRow_2";

				/**
				 * [tDBRow_2 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_2 process_data_end ] start
				 */

				currentComponent = "tDBRow_2";

				/**
				 * [tDBRow_2 process_data_end ] stop
				 */

				/**
				 * [tDBRow_2 end ] start
				 */

				currentComponent = "tDBRow_2";

// end of generic

				resourceMap.put("finish_tDBRow_2", Boolean.TRUE);

				ok_Hash.put("tDBRow_2", true);
				end_Hash.put("tDBRow_2", System.currentTimeMillis());

				/**
				 * [tDBRow_2 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tDBInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_2 finally ] start
				 */

				currentComponent = "tDBRow_2";

// finally of generic

				if (resourceMap.get("finish_tDBRow_2") == null) {
				}

				/**
				 * [tDBRow_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TEST_TALEND_BIG_DATA_Customers_SCD = new byte[0];
		static byte[] commonByteArray_TEST_TALEND_BIG_DATA_Customers_SCD = new byte[0];

		public String CUSTOMERID;

		public String getCUSTOMERID() {
			return this.CUSTOMERID;
		}

		public String COMPANYNAME;

		public String getCOMPANYNAME() {
			return this.COMPANYNAME;
		}

		public String CONTACTNAME;

		public String getCONTACTNAME() {
			return this.CONTACTNAME;
		}

		public String CONTACTTITLE;

		public String getCONTACTTITLE() {
			return this.CONTACTTITLE;
		}

		public String ADDRESS;

		public String getADDRESS() {
			return this.ADDRESS;
		}

		public String CITY;

		public String getCITY() {
			return this.CITY;
		}

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		public String POSTALCODE;

		public String getPOSTALCODE() {
			return this.POSTALCODE;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public String PHONE;

		public String getPHONE() {
			return this.PHONE;
		}

		public String FAX;

		public String getFAX() {
			return this.FAX;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_TALEND_BIG_DATA_Customers_SCD.length) {
					if (length < 1024 && commonByteArray_TEST_TALEND_BIG_DATA_Customers_SCD.length == 0) {
						commonByteArray_TEST_TALEND_BIG_DATA_Customers_SCD = new byte[1024];
					} else {
						commonByteArray_TEST_TALEND_BIG_DATA_Customers_SCD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_TALEND_BIG_DATA_Customers_SCD, 0, length);
				strReturn = new String(commonByteArray_TEST_TALEND_BIG_DATA_Customers_SCD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_TALEND_BIG_DATA_Customers_SCD) {

				try {

					int length = 0;

					this.CUSTOMERID = readString(dis);

					this.COMPANYNAME = readString(dis);

					this.CONTACTNAME = readString(dis);

					this.CONTACTTITLE = readString(dis);

					this.ADDRESS = readString(dis);

					this.CITY = readString(dis);

					this.REGION = readString(dis);

					this.POSTALCODE = readString(dis);

					this.COUNTRY = readString(dis);

					this.PHONE = readString(dis);

					this.FAX = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CUSTOMERID, dos);

				// String

				writeString(this.COMPANYNAME, dos);

				// String

				writeString(this.CONTACTNAME, dos);

				// String

				writeString(this.CONTACTTITLE, dos);

				// String

				writeString(this.ADDRESS, dos);

				// String

				writeString(this.CITY, dos);

				// String

				writeString(this.REGION, dos);

				// String

				writeString(this.POSTALCODE, dos);

				// String

				writeString(this.COUNTRY, dos);

				// String

				writeString(this.PHONE, dos);

				// String

				writeString(this.FAX, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CUSTOMERID=" + CUSTOMERID);
			sb.append(",COMPANYNAME=" + COMPANYNAME);
			sb.append(",CONTACTNAME=" + CONTACTNAME);
			sb.append(",CONTACTTITLE=" + CONTACTTITLE);
			sb.append(",ADDRESS=" + ADDRESS);
			sb.append(",CITY=" + CITY);
			sb.append(",REGION=" + REGION);
			sb.append(",POSTALCODE=" + POSTALCODE);
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",PHONE=" + PHONE);
			sb.append(",FAX=" + FAX);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tDBOutput_1 = 0;

				org.talend.components.api.component.ComponentDefinition def_tDBOutput_1 = new org.talend.components.jdbc.tjdbcoutput.TJDBCOutputDefinition();

				org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties props_tDBOutput_1 = (org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties) def_tDBOutput_1
						.createRuntimeProperties();
				props_tDBOutput_1.setValue("dataAction",
						org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties.DataAction.INSERT);

				props_tDBOutput_1.setValue("clearDataInTable", true);

				props_tDBOutput_1.setValue("dieOnError", true);

				props_tDBOutput_1.setValue("enableFieldOptions", false);

				props_tDBOutput_1.setValue("debug", false);

				props_tDBOutput_1.setValue("useBatch", true);

				props_tDBOutput_1.setValue("batchSize", 10000);

				props_tDBOutput_1.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBOutput_1.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBOutput_1.referencedComponent.setValue("referenceDefinitionName", "tJDBCConnection");

				props_tDBOutput_1.connection.userPassword.setValue("useAuth", false);

				props_tDBOutput_1.tableSelection.setValue("tablename", "CUSTOMERS");

				class SchemaSettingTool_tDBOutput_1_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"CUSTOMERS\",\"fields\":[{", s);

						a("\"name\":\"CUSTOMERID\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.dbColumnName\":\"CUSTOMERID\",\"di.prop.Comment\":\"\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"5\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"CUSTOMERID\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"COMPANYNAME\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.dbColumnName\":\"COMPANYNAME\",\"di.prop.Comment\":\"\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"40\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"COMPANYNAME\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CONTACTNAME\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"CONTACTNAME\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"CONTACTNAME\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"30\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CONTACTTITLE\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"CONTACTTITLE\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"CONTACTTITLE\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"30\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"ADDRESS\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"ADDRESS\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"ADDRESS\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"60\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CITY\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"CITY\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"CITY\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"REGION\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"REGION\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"REGION\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"POSTALCODE\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"POSTALCODE\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"POSTALCODE\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"COUNTRY\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"COUNTRY\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"COUNTRY\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"PHONE\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"PHONE\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"PHONE\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"24\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"FAX\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"FAX\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"FAX\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"24\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tDBOutput_1\",\"di.table.label\":\"CUSTOMERS\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBOutput_1_1_fisrt sst_tDBOutput_1_1_fisrt = new SchemaSettingTool_tDBOutput_1_1_fisrt();

				props_tDBOutput_1.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_1_1_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBOutput_1_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"CUSTOMERS\",\"fields\":[{", s);

						a("\"name\":\"CUSTOMERID\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.dbColumnName\":\"CUSTOMERID\",\"di.prop.Comment\":\"\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"5\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"CUSTOMERID\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"COMPANYNAME\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.dbColumnName\":\"COMPANYNAME\",\"di.prop.Comment\":\"\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"40\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"COMPANYNAME\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CONTACTNAME\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"CONTACTNAME\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"CONTACTNAME\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"30\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CONTACTTITLE\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"CONTACTTITLE\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"CONTACTTITLE\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"30\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"ADDRESS\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"ADDRESS\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"ADDRESS\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"60\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CITY\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"CITY\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"CITY\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"REGION\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"REGION\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"REGION\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"POSTALCODE\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"POSTALCODE\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"POSTALCODE\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"COUNTRY\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"COUNTRY\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"COUNTRY\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"PHONE\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"PHONE\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"PHONE\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"24\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"FAX\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"FAX\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"FAX\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"24\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tDBOutput_1\",\"di.table.label\":\"CUSTOMERS\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBOutput_1_2_fisrt sst_tDBOutput_1_2_fisrt = new SchemaSettingTool_tDBOutput_1_2_fisrt();

				props_tDBOutput_1.schemaFlow.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_1_2_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBOutput_1_3_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"CUSTOMERID\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.dbColumnName\":\"CUSTOMERID\",\"di.prop.Comment\":\"\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"5\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"CUSTOMERID\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"COMPANYNAME\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.dbColumnName\":\"COMPANYNAME\",\"di.prop.Comment\":\"\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"40\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"COMPANYNAME\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CONTACTNAME\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"CONTACTNAME\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"CONTACTNAME\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"30\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CONTACTTITLE\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"CONTACTTITLE\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"CONTACTTITLE\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"30\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"ADDRESS\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"ADDRESS\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"ADDRESS\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"60\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CITY\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"CITY\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"CITY\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"REGION\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"REGION\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"REGION\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"POSTALCODE\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"POSTALCODE\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"POSTALCODE\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"COUNTRY\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"COUNTRY\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"COUNTRY\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"PHONE\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"PHONE\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"PHONE\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"24\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"FAX\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"FAX\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"FAX\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"24\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}],\"di.table.name\":\"tDBOutput_1\",\"di.table.label\":\"CUSTOMERS\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBOutput_1_3_fisrt sst_tDBOutput_1_3_fisrt = new SchemaSettingTool_tDBOutput_1_3_fisrt();

				props_tDBOutput_1.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_1_3_fisrt.getSchemaValue()));

				props_tDBOutput_1.additionalColumns.setValue("positions", "BEFORE");

				props_tDBOutput_1.additionalColumns.setValue("referenceColumns", "CUSTOMERID");

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_1.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBOutput_1 = props_tDBOutput_1.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBOutput_1 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_1 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBOutput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBOutput_1.referencedComponent.setReference(referencedComponentProperties_tDBOutput_1);
					}
				}
				globalMap.put("tDBOutput_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBOutput_1);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
				java.net.URL mappings_url_tDBOutput_1 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBOutput_1_MAPPINGS_URL", mappings_url_tDBOutput_1);

				org.talend.components.api.container.RuntimeContainer container_tDBOutput_1 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBOutput_1";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBOutput_1 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBOutput_1 = null;
				topology_tDBOutput_1 = org.talend.components.api.component.ConnectorTopology.INCOMING;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBOutput_1 = def_tDBOutput_1.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBOutput_1,
						topology_tDBOutput_1);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBOutput_1 = def_tDBOutput_1
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBOutput_1 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBOutput_1.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBOutput_1 = componentRuntime_tDBOutput_1
						.initialize(container_tDBOutput_1, props_tDBOutput_1);

				if (initVr_tDBOutput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBOutput_1.getMessage());
				}

				if (componentRuntime_tDBOutput_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBOutput_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBOutput_1;
					compDriverInitialization_tDBOutput_1.runAtDriver(container_tDBOutput_1);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBOutput_1 = null;
				if (componentRuntime_tDBOutput_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBOutput_1 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBOutput_1;
					org.talend.daikon.properties.ValidationResult vr_tDBOutput_1 = sourceOrSink_tDBOutput_1
							.validate(container_tDBOutput_1);
					if (vr_tDBOutput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
						throw new RuntimeException(vr_tDBOutput_1.getMessage());
					}
				}

				org.talend.components.api.component.runtime.Sink sink_tDBOutput_1 = (org.talend.components.api.component.runtime.Sink) sourceOrSink_tDBOutput_1;
				org.talend.components.api.component.runtime.WriteOperation writeOperation_tDBOutput_1 = sink_tDBOutput_1
						.createWriteOperation();
				writeOperation_tDBOutput_1.initialize(container_tDBOutput_1);
				org.talend.components.api.component.runtime.Writer writer_tDBOutput_1 = writeOperation_tDBOutput_1
						.createWriter(container_tDBOutput_1);
				writer_tDBOutput_1.open("tDBOutput_1");

				resourceMap.put("writer_tDBOutput_1", writer_tDBOutput_1);

				org.talend.components.api.component.Connector c_tDBOutput_1 = null;
				for (org.talend.components.api.component.Connector currentConnector : props_tDBOutput_1
						.getAvailableConnectors(null, false)) {
					if (currentConnector.getName().equals("MAIN")) {
						c_tDBOutput_1 = currentConnector;
						break;
					}
				}
				org.apache.avro.Schema designSchema_tDBOutput_1 = props_tDBOutput_1.getSchema(c_tDBOutput_1, false);
				org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tDBOutput_1 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(
						designSchema_tDBOutput_1);
				java.lang.Iterable<?> outgoingMainRecordsList_tDBOutput_1 = new java.util.ArrayList<Object>();
				java.util.Iterator outgoingMainRecordsIt_tDBOutput_1 = null;

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_1 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1);
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:p91557dpZb/dCoPh9q6BAHtw36INDgzB3lq/2A==");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String port_tDBInput_1 = "1433";
				String dbname_tDBInput_1 = "Northwind";
				String url_tDBInput_1 = "jdbc:sqlserver://" + "localhost";
				if (!"".equals(port_tDBInput_1)) {
					url_tDBInput_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_1)) {
					url_tDBInput_1 += ";databaseName=" + "Northwind";
				}
				url_tDBInput_1 += ";appName=" + projectName + ";" + "IntegratedSecurity=true";
				String dbschema_tDBInput_1 = "";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT Customers.CustomerID,\n		Customers.CompanyName,\n		Customers.ContactName,\n		Customers.ContactTitle,\n		Customers.Ad"
						+ "dress,\n		Customers.City,\n		Customers.Region,\n		Customers.PostalCode,\n		Customers.Country,\n		Customers.Phone,\n		Customers"
						+ ".Fax\nFROM	Customers";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.CUSTOMERID = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.CUSTOMERID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.CUSTOMERID = tmpContent_tDBInput_1;
								}
							} else {
								row1.CUSTOMERID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.COMPANYNAME = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.COMPANYNAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.COMPANYNAME = tmpContent_tDBInput_1;
								}
							} else {
								row1.COMPANYNAME = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.CONTACTNAME = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.CONTACTNAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.CONTACTNAME = tmpContent_tDBInput_1;
								}
							} else {
								row1.CONTACTNAME = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.CONTACTTITLE = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.CONTACTTITLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.CONTACTTITLE = tmpContent_tDBInput_1;
								}
							} else {
								row1.CONTACTTITLE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.ADDRESS = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(5);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.ADDRESS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.ADDRESS = tmpContent_tDBInput_1;
								}
							} else {
								row1.ADDRESS = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.CITY = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(6);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.CITY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.CITY = tmpContent_tDBInput_1;
								}
							} else {
								row1.CITY = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.REGION = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(7);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.REGION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.REGION = tmpContent_tDBInput_1;
								}
							} else {
								row1.REGION = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.POSTALCODE = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(8);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.POSTALCODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.POSTALCODE = tmpContent_tDBInput_1;
								}
							} else {
								row1.POSTALCODE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.COUNTRY = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(9);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.COUNTRY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.COUNTRY = tmpContent_tDBInput_1;
								}
							} else {
								row1.COUNTRY = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.PHONE = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(10);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.PHONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.PHONE = tmpContent_tDBInput_1;
								}
							} else {
								row1.PHONE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.FAX = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(11);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.FAX = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.FAX = tmpContent_tDBInput_1;
								}
							} else {
								row1.FAX = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 main ] start
						 */

						currentComponent = "tDBOutput_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						incomingEnforcer_tDBOutput_1.createNewRecord();
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("CUSTOMERID") != null) {
							incomingEnforcer_tDBOutput_1.put("CUSTOMERID", row1.CUSTOMERID);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("COMPANYNAME") != null) {
							incomingEnforcer_tDBOutput_1.put("COMPANYNAME", row1.COMPANYNAME);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("CONTACTNAME") != null) {
							incomingEnforcer_tDBOutput_1.put("CONTACTNAME", row1.CONTACTNAME);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("CONTACTTITLE") != null) {
							incomingEnforcer_tDBOutput_1.put("CONTACTTITLE", row1.CONTACTTITLE);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("ADDRESS") != null) {
							incomingEnforcer_tDBOutput_1.put("ADDRESS", row1.ADDRESS);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("CITY") != null) {
							incomingEnforcer_tDBOutput_1.put("CITY", row1.CITY);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("REGION") != null) {
							incomingEnforcer_tDBOutput_1.put("REGION", row1.REGION);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("POSTALCODE") != null) {
							incomingEnforcer_tDBOutput_1.put("POSTALCODE", row1.POSTALCODE);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("COUNTRY") != null) {
							incomingEnforcer_tDBOutput_1.put("COUNTRY", row1.COUNTRY);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("PHONE") != null) {
							incomingEnforcer_tDBOutput_1.put("PHONE", row1.PHONE);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("FAX") != null) {
							incomingEnforcer_tDBOutput_1.put("FAX", row1.FAX);
						}
						org.apache.avro.generic.IndexedRecord data_tDBOutput_1 = incomingEnforcer_tDBOutput_1
								.getCurrentRecord();

						writer_tDBOutput_1.write(data_tDBOutput_1);

						nb_line_tDBOutput_1++;

						tos_count_tDBOutput_1++;

						/**
						 * [tDBOutput_1 main ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_end ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

// end of generic

				resourceMap.put("finish_tDBOutput_1", Boolean.TRUE);

				org.talend.components.api.component.runtime.Result resultObject_tDBOutput_1 = (org.talend.components.api.component.runtime.Result) writer_tDBOutput_1
						.close();
				final java.util.Map<String, Object> resultMap_tDBOutput_1 = writer_tDBOutput_1.getWriteOperation()
						.finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(
								resultObject_tDBOutput_1), container_tDBOutput_1);
				if (resultMap_tDBOutput_1 != null) {
					for (java.util.Map.Entry<String, Object> entry_tDBOutput_1 : resultMap_tDBOutput_1.entrySet()) {
						switch (entry_tDBOutput_1.getKey()) {
						case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE:
							container_tDBOutput_1.setComponentData("tDBOutput_1", "ERROR_MESSAGE",
									entry_tDBOutput_1.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT:
							container_tDBOutput_1.setComponentData("tDBOutput_1", "NB_LINE",
									entry_tDBOutput_1.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT:
							container_tDBOutput_1.setComponentData("tDBOutput_1", "NB_SUCCESS",
									entry_tDBOutput_1.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT:
							container_tDBOutput_1.setComponentData("tDBOutput_1", "NB_REJECT",
									entry_tDBOutput_1.getValue());
							break;
						default:
							StringBuilder studio_key_tDBOutput_1 = new StringBuilder();
							for (int i_tDBOutput_1 = 0; i_tDBOutput_1 < entry_tDBOutput_1.getKey()
									.length(); i_tDBOutput_1++) {
								char ch_tDBOutput_1 = entry_tDBOutput_1.getKey().charAt(i_tDBOutput_1);
								if (Character.isUpperCase(ch_tDBOutput_1) && i_tDBOutput_1 > 0) {
									studio_key_tDBOutput_1.append('_');
								}
								studio_key_tDBOutput_1.append(ch_tDBOutput_1);
							}
							container_tDBOutput_1.setComponentData("tDBOutput_1",
									studio_key_tDBOutput_1.toString().toUpperCase(java.util.Locale.ENGLISH),
									entry_tDBOutput_1.getValue());
							break;
						}
					}
				}

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
			}

			tJDBCSCDELT_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

// finally of generic

				if (resourceMap.get("finish_tDBOutput_1") == null) {
					if (resourceMap.get("writer_tDBOutput_1") != null) {
						try {
							((org.talend.components.api.component.runtime.Writer) resourceMap.get("writer_tDBOutput_1"))
									.close();
						} catch (java.io.IOException e_tDBOutput_1) {
							String errorMessage_tDBOutput_1 = "failed to release the resource in tDBOutput_1 :"
									+ e_tDBOutput_1.getMessage();
							System.err.println(errorMessage_tDBOutput_1);
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCSCDELT_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJDBCSCDELT_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJDBCSCDELT_1 begin ] start
				 */

				ok_Hash.put("tJDBCSCDELT_1", false);
				start_Hash.put("tJDBCSCDELT_1", System.currentTimeMillis());

				currentComponent = "tJDBCSCDELT_1";

				int tos_count_tJDBCSCDELT_1 = 0;

				java.sql.Connection conn_tJDBCSCDELT_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				String dbUser_tJDBCSCDELT_1 = (String) globalMap.get("username_tDBConnection_1");

				String dbschema_tJDBCSCDELT_1 = "PUBLIC";
				String sourceTable_tJDBCSCDELT_1 = "CUSTOMERS";
				String tableName_tJDBCSCDELT_1 = "CUSTOMERS_SCD";

				if (dbschema_tJDBCSCDELT_1 != null && !dbschema_tJDBCSCDELT_1.trim().isEmpty()) {
					tableName_tJDBCSCDELT_1 = dbschema_tJDBCSCDELT_1 + "." + tableName_tJDBCSCDELT_1;
					sourceTable_tJDBCSCDELT_1 = dbschema_tJDBCSCDELT_1 + "." + sourceTable_tJDBCSCDELT_1;

				}

				java.sql.DatabaseMetaData dbMetaData_tJDBCSCDELT_1 = conn_tJDBCSCDELT_1.getMetaData();
				boolean whetherExist_tJDBCSCDELT_1 = false;
				try (java.sql.ResultSet rsTable_tJDBCSCDELT_1 = dbMetaData_tJDBCSCDELT_1.getTables(null, null, null,
						new String[] { "TABLE" })) {
					while (rsTable_tJDBCSCDELT_1.next()) {
						String table_tJDBCSCDELT_1 = rsTable_tJDBCSCDELT_1.getString("TABLE_NAME");
						if (table_tJDBCSCDELT_1.equalsIgnoreCase("CUSTOMERS_SCD")) {
							whetherExist_tJDBCSCDELT_1 = true;
							break;
						}
					}
				}
				if (!whetherExist_tJDBCSCDELT_1) {
					try (java.sql.Statement stmtCreate_tJDBCSCDELT_1 = conn_tJDBCSCDELT_1.createStatement()) {
						stmtCreate_tJDBCSCDELT_1.execute("CREATE TABLE " + tableName_tJDBCSCDELT_1
								+ "(SK INT  not null ,CUSTOMERID VARCHAR(5)   not null ,COMPANYNAME VARCHAR(40)   not null ,CONTACTNAME VARCHAR(30)  ,CONTACTTITLE VARCHAR(30)  ,ADDRESS VARCHAR(60)  ,CITY VARCHAR(15)  ,REGION VARCHAR(15)  ,POSTALCODE VARCHAR(10)  ,COUNTRY VARCHAR(15)  ,PHONE VARCHAR(24)  ,FAX VARCHAR(24)  ,START_DATE DATE ,END_DATE DATE ,ACTIVE_STATUS INT ,VERSION INT ,primary key(SK,CUSTOMERID))");
					}
				}

				String sequence_tJDBCSCDELT_1 = "CUSTOMER_SEQUENCE";
				String sequenceValueFetchPattern_tJDBCSCDELT_1;
				if (dbschema_tJDBCSCDELT_1 != null && !dbschema_tJDBCSCDELT_1.trim().isEmpty()) {
					sequenceValueFetchPattern_tJDBCSCDELT_1 = dbschema_tJDBCSCDELT_1 + "." + sequence_tJDBCSCDELT_1
							+ ".nextval ";
					// snowflake is not case sensitive, so no need to consider the quoter here.
				} else {
					sequenceValueFetchPattern_tJDBCSCDELT_1 = sequence_tJDBCSCDELT_1 + ".nextval ";
				}

				String updateForType1_tJDBCSCDELT_1 = "UPDATE " + tableName_tJDBCSCDELT_1
						+ " d SET  COMPANYNAME = t.COMPANYNAME FROM " + sourceTable_tJDBCSCDELT_1
						+ " t WHERE  d.CUSTOMERID = t.CUSTOMERID AND (( d.COMPANYNAME is null AND t.COMPANYNAME is not null ) OR ( d.COMPANYNAME is not null AND t.COMPANYNAME is null ) OR ( d.COMPANYNAME <> t.COMPANYNAME))";
				java.sql.Statement stmtType1Update_tJDBCSCDELT_1 = conn_tJDBCSCDELT_1.createStatement();
				stmtType1Update_tJDBCSCDELT_1.executeUpdate(updateForType1_tJDBCSCDELT_1);
				stmtType1Update_tJDBCSCDELT_1.close();
				String changeDateTime_tJDBCSCDELT_1 = (new java.sql.Timestamp((Long) start_Hash.get("tJDBCSCDELT_1")))
						.toString();
				String customEndDate_tJDBCSCDELT_1 = java.sql.Timestamp.valueOf("9999-12-31" + " 00:00:00").toString();
				String updateForType2_tJDBCSCDELT_1 = "UPDATE " + tableName_tJDBCSCDELT_1 + " d SET END_DATE = '"
						+ (changeDateTime_tJDBCSCDELT_1) + "', ACTIVE_STATUS = 0 FROM " + sourceTable_tJDBCSCDELT_1
						+ " t WHERE  d.CUSTOMERID = t.CUSTOMERID AND (( d.CONTACTNAME is null AND t.CONTACTNAME is not null ) OR ( d.CONTACTNAME is not null AND t.CONTACTNAME is null ) OR ( d.CONTACTNAME <> t.CONTACTNAME) OR ( d.CONTACTTITLE is null AND t.CONTACTTITLE is not null ) OR ( d.CONTACTTITLE is not null AND t.CONTACTTITLE is null ) OR ( d.CONTACTTITLE <> t.CONTACTTITLE) OR ( d.ADDRESS is null AND t.ADDRESS is not null ) OR ( d.ADDRESS is not null AND t.ADDRESS is null ) OR ( d.ADDRESS <> t.ADDRESS) OR ( d.CITY is null AND t.CITY is not null ) OR ( d.CITY is not null AND t.CITY is null ) OR ( d.CITY <> t.CITY) OR ( d.REGION is null AND t.REGION is not null ) OR ( d.REGION is not null AND t.REGION is null ) OR ( d.REGION <> t.REGION) OR ( d.POSTALCODE is null AND t.POSTALCODE is not null ) OR ( d.POSTALCODE is not null AND t.POSTALCODE is null ) OR ( d.POSTALCODE <> t.POSTALCODE) OR ( d.COUNTRY is null AND t.COUNTRY is not null ) OR ( d.COUNTRY is not null AND t.COUNTRY is null ) OR ( d.COUNTRY <> t.COUNTRY) OR ( d.PHONE is null AND t.PHONE is not null ) OR ( d.PHONE is not null AND t.PHONE is null ) OR ( d.PHONE <> t.PHONE) OR ( d.FAX is null AND t.FAX is not null ) OR ( d.FAX is not null AND t.FAX is null ) OR ( d.FAX <> t.FAX)) AND d.END_DATE = '"
						+ (customEndDate_tJDBCSCDELT_1) + "'";
				java.sql.Statement stmtType2Update_tJDBCSCDELT_1 = conn_tJDBCSCDELT_1.createStatement();
				stmtType2Update_tJDBCSCDELT_1.executeUpdate(updateForType2_tJDBCSCDELT_1);
				stmtType2Update_tJDBCSCDELT_1.close();
				String insertForType2_tJDBCSCDELT_1 = "INSERT INTO " + tableName_tJDBCSCDELT_1
						+ "(SK, CUSTOMERID, COMPANYNAME, CONTACTNAME, CONTACTTITLE, ADDRESS, CITY, REGION, POSTALCODE, COUNTRY, PHONE, FAX, START_DATE, END_DATE, ACTIVE_STATUS, VERSION) SELECT "
						+ sequenceValueFetchPattern_tJDBCSCDELT_1 + ", "
						+ " t.CUSTOMERID, t.COMPANYNAME, t.CONTACTNAME, t.CONTACTTITLE, t.ADDRESS, t.CITY, t.REGION, t.POSTALCODE, t.COUNTRY, t.PHONE, t.FAX, '"
						+ (changeDateTime_tJDBCSCDELT_1) + "', '" + (customEndDate_tJDBCSCDELT_1)
						+ "', 1, d.VERSION + 1 FROM " + sourceTable_tJDBCSCDELT_1 + " t, " + tableName_tJDBCSCDELT_1
						+ " d WHERE  d.CUSTOMERID = t.CUSTOMERID AND (( d.CONTACTNAME is null AND t.CONTACTNAME is not null ) OR ( d.CONTACTNAME is not null AND t.CONTACTNAME is null ) OR ( d.CONTACTNAME <> t.CONTACTNAME) OR ( d.CONTACTTITLE is null AND t.CONTACTTITLE is not null ) OR ( d.CONTACTTITLE is not null AND t.CONTACTTITLE is null ) OR ( d.CONTACTTITLE <> t.CONTACTTITLE) OR ( d.ADDRESS is null AND t.ADDRESS is not null ) OR ( d.ADDRESS is not null AND t.ADDRESS is null ) OR ( d.ADDRESS <> t.ADDRESS) OR ( d.CITY is null AND t.CITY is not null ) OR ( d.CITY is not null AND t.CITY is null ) OR ( d.CITY <> t.CITY) OR ( d.REGION is null AND t.REGION is not null ) OR ( d.REGION is not null AND t.REGION is null ) OR ( d.REGION <> t.REGION) OR ( d.POSTALCODE is null AND t.POSTALCODE is not null ) OR ( d.POSTALCODE is not null AND t.POSTALCODE is null ) OR ( d.POSTALCODE <> t.POSTALCODE) OR ( d.COUNTRY is null AND t.COUNTRY is not null ) OR ( d.COUNTRY is not null AND t.COUNTRY is null ) OR ( d.COUNTRY <> t.COUNTRY) OR ( d.PHONE is null AND t.PHONE is not null ) OR ( d.PHONE is not null AND t.PHONE is null ) OR ( d.PHONE <> t.PHONE) OR ( d.FAX is null AND t.FAX is not null ) OR ( d.FAX is not null AND t.FAX is null ) OR ( d.FAX <> t.FAX)) AND d.END_DATE = '"
						+ (changeDateTime_tJDBCSCDELT_1) + "'";
				java.sql.Statement stmtType2Insert_tJDBCSCDELT_1 = conn_tJDBCSCDELT_1.createStatement();
				stmtType2Insert_tJDBCSCDELT_1.executeUpdate(insertForType2_tJDBCSCDELT_1);
				stmtType2Insert_tJDBCSCDELT_1.close();
				String insert_tJDBCSCDELT_1 = "INSERT INTO " + tableName_tJDBCSCDELT_1
						+ "(SK, CUSTOMERID, COMPANYNAME, CONTACTNAME, CONTACTTITLE, ADDRESS, CITY, REGION, POSTALCODE, COUNTRY, PHONE, FAX, START_DATE, END_DATE, ACTIVE_STATUS, VERSION) SELECT "
						+ sequenceValueFetchPattern_tJDBCSCDELT_1 + ", "
						+ " t.CUSTOMERID, t.COMPANYNAME, t.CONTACTNAME, t.CONTACTTITLE, t.ADDRESS, t.CITY, t.REGION, t.POSTALCODE, t.COUNTRY, t.PHONE, t.FAX"
						+ ", '" + (changeDateTime_tJDBCSCDELT_1) + "', '" + (customEndDate_tJDBCSCDELT_1) + "'"
						+ ", 1, 1 FROM " + sourceTable_tJDBCSCDELT_1 + " t LEFT JOIN " + tableName_tJDBCSCDELT_1
						+ " d ON  d.CUSTOMERID = t.CUSTOMERID WHERE ( d.CUSTOMERID IS NULL)";
				java.sql.Statement stmtInsert_tJDBCSCDELT_1 = conn_tJDBCSCDELT_1.createStatement();
				stmtInsert_tJDBCSCDELT_1.executeUpdate(insert_tJDBCSCDELT_1);
				stmtInsert_tJDBCSCDELT_1.close();

				/**
				 * [tJDBCSCDELT_1 begin ] stop
				 */

				/**
				 * [tJDBCSCDELT_1 main ] start
				 */

				currentComponent = "tJDBCSCDELT_1";

				tos_count_tJDBCSCDELT_1++;

				/**
				 * [tJDBCSCDELT_1 main ] stop
				 */

				/**
				 * [tJDBCSCDELT_1 process_data_begin ] start
				 */

				currentComponent = "tJDBCSCDELT_1";

				/**
				 * [tJDBCSCDELT_1 process_data_begin ] stop
				 */

				/**
				 * [tJDBCSCDELT_1 process_data_end ] start
				 */

				currentComponent = "tJDBCSCDELT_1";

				/**
				 * [tJDBCSCDELT_1 process_data_end ] stop
				 */

				/**
				 * [tJDBCSCDELT_1 end ] start
				 */

				currentComponent = "tJDBCSCDELT_1";

				ok_Hash.put("tJDBCSCDELT_1", true);
				end_Hash.put("tJDBCSCDELT_1", System.currentTimeMillis());

				/**
				 * [tJDBCSCDELT_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJDBCSCDELT_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
			}

			tDBInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCSCDELT_1 finally ] start
				 */

				currentComponent = "tJDBCSCDELT_1";

				/**
				 * [tJDBCSCDELT_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCSCDELT_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_TEST_TALEND_BIG_DATA_Customers_SCD = new byte[0];
		static byte[] commonByteArray_TEST_TALEND_BIG_DATA_Customers_SCD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SK;

		public int getSK() {
			return this.SK;
		}

		public String CUSTOMERID;

		public String getCUSTOMERID() {
			return this.CUSTOMERID;
		}

		public String COMPANYNAME;

		public String getCOMPANYNAME() {
			return this.COMPANYNAME;
		}

		public String CONTACTNAME;

		public String getCONTACTNAME() {
			return this.CONTACTNAME;
		}

		public String CONTACTTITLE;

		public String getCONTACTTITLE() {
			return this.CONTACTTITLE;
		}

		public String ADDRESS;

		public String getADDRESS() {
			return this.ADDRESS;
		}

		public String CITY;

		public String getCITY() {
			return this.CITY;
		}

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		public String POSTALCODE;

		public String getPOSTALCODE() {
			return this.POSTALCODE;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public String PHONE;

		public String getPHONE() {
			return this.PHONE;
		}

		public String FAX;

		public String getFAX() {
			return this.FAX;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public Integer ACTIVE_STATUS;

		public Integer getACTIVE_STATUS() {
			return this.ACTIVE_STATUS;
		}

		public Integer VERSION;

		public Integer getVERSION() {
			return this.VERSION;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SK;

				result = prime * result + ((this.CUSTOMERID == null) ? 0 : this.CUSTOMERID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.SK != other.SK)
				return false;

			if (this.CUSTOMERID == null) {
				if (other.CUSTOMERID != null)
					return false;

			} else if (!this.CUSTOMERID.equals(other.CUSTOMERID))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.SK = this.SK;
			other.CUSTOMERID = this.CUSTOMERID;
			other.COMPANYNAME = this.COMPANYNAME;
			other.CONTACTNAME = this.CONTACTNAME;
			other.CONTACTTITLE = this.CONTACTTITLE;
			other.ADDRESS = this.ADDRESS;
			other.CITY = this.CITY;
			other.REGION = this.REGION;
			other.POSTALCODE = this.POSTALCODE;
			other.COUNTRY = this.COUNTRY;
			other.PHONE = this.PHONE;
			other.FAX = this.FAX;
			other.START_DATE = this.START_DATE;
			other.END_DATE = this.END_DATE;
			other.ACTIVE_STATUS = this.ACTIVE_STATUS;
			other.VERSION = this.VERSION;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.SK = this.SK;
			other.CUSTOMERID = this.CUSTOMERID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_TALEND_BIG_DATA_Customers_SCD.length) {
					if (length < 1024 && commonByteArray_TEST_TALEND_BIG_DATA_Customers_SCD.length == 0) {
						commonByteArray_TEST_TALEND_BIG_DATA_Customers_SCD = new byte[1024];
					} else {
						commonByteArray_TEST_TALEND_BIG_DATA_Customers_SCD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_TALEND_BIG_DATA_Customers_SCD, 0, length);
				strReturn = new String(commonByteArray_TEST_TALEND_BIG_DATA_Customers_SCD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_TALEND_BIG_DATA_Customers_SCD) {

				try {

					int length = 0;

					this.SK = dis.readInt();

					this.CUSTOMERID = readString(dis);

					this.COMPANYNAME = readString(dis);

					this.CONTACTNAME = readString(dis);

					this.CONTACTTITLE = readString(dis);

					this.ADDRESS = readString(dis);

					this.CITY = readString(dis);

					this.REGION = readString(dis);

					this.POSTALCODE = readString(dis);

					this.COUNTRY = readString(dis);

					this.PHONE = readString(dis);

					this.FAX = readString(dis);

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					this.ACTIVE_STATUS = readInteger(dis);

					this.VERSION = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SK);

				// String

				writeString(this.CUSTOMERID, dos);

				// String

				writeString(this.COMPANYNAME, dos);

				// String

				writeString(this.CONTACTNAME, dos);

				// String

				writeString(this.CONTACTTITLE, dos);

				// String

				writeString(this.ADDRESS, dos);

				// String

				writeString(this.CITY, dos);

				// String

				writeString(this.REGION, dos);

				// String

				writeString(this.POSTALCODE, dos);

				// String

				writeString(this.COUNTRY, dos);

				// String

				writeString(this.PHONE, dos);

				// String

				writeString(this.FAX, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// Integer

				writeInteger(this.ACTIVE_STATUS, dos);

				// Integer

				writeInteger(this.VERSION, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SK=" + String.valueOf(SK));
			sb.append(",CUSTOMERID=" + CUSTOMERID);
			sb.append(",COMPANYNAME=" + COMPANYNAME);
			sb.append(",CONTACTNAME=" + CONTACTNAME);
			sb.append(",CONTACTTITLE=" + CONTACTTITLE);
			sb.append(",ADDRESS=" + ADDRESS);
			sb.append(",CITY=" + CITY);
			sb.append(",REGION=" + REGION);
			sb.append(",POSTALCODE=" + POSTALCODE);
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",PHONE=" + PHONE);
			sb.append(",FAX=" + FAX);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",ACTIVE_STATUS=" + String.valueOf(ACTIVE_STATUS));
			sb.append(",VERSION=" + String.valueOf(VERSION));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SK, other.SK);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CUSTOMERID, other.CUSTOMERID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tLogRow_3 = 0;

				///////////////////////

				class Util_tLogRow_3 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[16];

					public void addRow(String[] row) {

						for (int i = 0; i < 16; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 15 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 15 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[15] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
				util_tLogRow_3.setTableName("tLogRow_3");
				util_tLogRow_3.addRow(new String[] { "SK", "CUSTOMERID", "COMPANYNAME", "CONTACTNAME", "CONTACTTITLE",
						"ADDRESS", "CITY", "REGION", "POSTALCODE", "COUNTRY", "PHONE", "FAX", "START_DATE", "END_DATE",
						"ACTIVE_STATUS", "VERSION", });
				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
///////////////////////    			

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				org.talend.components.api.component.ComponentDefinition def_tDBInput_2 = new org.talend.components.jdbc.tjdbcinput.TJDBCInputDefinition();

				org.talend.components.jdbc.tjdbcinput.TJDBCInputProperties props_tDBInput_2 = (org.talend.components.jdbc.tjdbcinput.TJDBCInputProperties) def_tDBInput_2
						.createRuntimeProperties();
				props_tDBInput_2.setValue("sql",
						"SELECT \n  \"CUSTOMERS_SCD\".\"SK\", \n  \"CUSTOMERS_SCD\".\"CUSTOMERID\", \n  \"CUSTOMERS_SCD\".\"COMPANYNAME\", \n  \"CUS"
								+ "TOMERS_SCD\".\"CONTACTNAME\", \n  \"CUSTOMERS_SCD\".\"CONTACTTITLE\", \n  \"CUSTOMERS_SCD\".\"ADDRESS\", \n  \"CUSTOMERS_SC"
								+ "D\".\"CITY\", \n  \"CUSTOMERS_SCD\".\"REGION\", \n  \"CUSTOMERS_SCD\".\"POSTALCODE\", \n  \"CUSTOMERS_SCD\".\"COUNTRY\", \n "
								+ " \"CUSTOMERS_SCD\".\"PHONE\", \n  \"CUSTOMERS_SCD\".\"FAX\", \n  \"CUSTOMERS_SCD\".\"START_DATE\", \n  \"CUSTOMERS_SCD\".\""
								+ "END_DATE\", \n  \"CUSTOMERS_SCD\".\"ACTIVE_STATUS\", \n  \"CUSTOMERS_SCD\".\"VERSION\"\nFROM \"CUSTOMERS_SCD\"");

				props_tDBInput_2.setValue("useCursor", false);

				props_tDBInput_2.setValue("trimStringOrCharColumns", false);

				props_tDBInput_2.setValue("enableDBMapping", false);

				props_tDBInput_2.setValue("usePreparedStatement", false);

				props_tDBInput_2.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBInput_2.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBInput_2.referencedComponent.setValue("referenceDefinitionName", "tJDBCConnection");

				props_tDBInput_2.connection.userPassword.setValue("useAuth", false);

				class SchemaSettingTool_tDBInput_2_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"CUSTOMERS_SCD\",\"fields\":[{", s);

						a("\"name\":\"SK\",\"type\":\"int\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT\",\"talend.field.dbColumnName\":\"SK\",\"di.column.talendType\":\"id_Integer\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"SK\",\"talend.field.isKey\":\"true\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CUSTOMERID\",\"type\":\"string\",\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"CUSTOMERID\",\"talend.field.precision\":\"0\",\"talend.field.isKey\":\"true\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"CUSTOMERID\",\"di.prop.Comment\":\"\",\"talend.field.length\":\"5\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"COMPANYNAME\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.dbColumnName\":\"COMPANYNAME\",\"di.prop.Comment\":\"\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"40\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"COMPANYNAME\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CONTACTNAME\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"CONTACTNAME\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"CONTACTNAME\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"30\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CONTACTTITLE\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"CONTACTTITLE\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"CONTACTTITLE\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"30\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"ADDRESS\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"ADDRESS\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"ADDRESS\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"60\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CITY\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"CITY\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"CITY\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"REGION\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"REGION\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"REGION\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"POSTALCODE\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"POSTALCODE\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"POSTALCODE\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"COUNTRY\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"COUNTRY\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"COUNTRY\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"PHONE\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"PHONE\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"PHONE\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"24\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"FAX\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"VARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"FAX\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"FAX\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"24\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"START_DATE\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"DATE\",\"talend.field.dbColumnName\":\"START_DATE\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"dd-MM-yyyy\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"START_DATE\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"END_DATE\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"DATE\",\"talend.field.dbColumnName\":\"END_DATE\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"dd-MM-yyyy\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"END_DATE\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"ACTIVE_STATUS\",\"type\":[\"int\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT\",\"talend.field.dbColumnName\":\"ACTIVE_STATUS\",\"di.column.talendType\":\"id_Integer\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ACTIVE_STATUS\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"VERSION\",\"type\":[\"int\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT\",\"talend.field.dbColumnName\":\"VERSION\",\"di.column.talendType\":\"id_Integer\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"VERSION\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"CUSTOMERS_SCD\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBInput_2_1_fisrt sst_tDBInput_2_1_fisrt = new SchemaSettingTool_tDBInput_2_1_fisrt();

				props_tDBInput_2.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBInput_2_1_fisrt.getSchemaValue()));

				props_tDBInput_2.tableSelection.setValue("tablename", "CUSTOMERS_SCD");

				java.util.List<Object> tDBInput_2_trimTable_trim = new java.util.ArrayList<Object>();

				tDBInput_2_trimTable_trim.add(false);

				tDBInput_2_trimTable_trim.add(false);

				tDBInput_2_trimTable_trim.add(false);

				tDBInput_2_trimTable_trim.add(false);

				tDBInput_2_trimTable_trim.add(false);

				tDBInput_2_trimTable_trim.add(false);

				tDBInput_2_trimTable_trim.add(false);

				tDBInput_2_trimTable_trim.add(false);

				tDBInput_2_trimTable_trim.add(false);

				tDBInput_2_trimTable_trim.add(false);

				tDBInput_2_trimTable_trim.add(false);

				tDBInput_2_trimTable_trim.add(false);

				tDBInput_2_trimTable_trim.add(false);

				tDBInput_2_trimTable_trim.add(false);

				tDBInput_2_trimTable_trim.add(false);

				tDBInput_2_trimTable_trim.add(false);

				((org.talend.daikon.properties.Properties) props_tDBInput_2.trimTable).setValue("trim",
						tDBInput_2_trimTable_trim);

				java.util.List<Object> tDBInput_2_trimTable_columnName = new java.util.ArrayList<Object>();

				tDBInput_2_trimTable_columnName.add("SK");

				tDBInput_2_trimTable_columnName.add("CUSTOMERID");

				tDBInput_2_trimTable_columnName.add("COMPANYNAME");

				tDBInput_2_trimTable_columnName.add("CONTACTNAME");

				tDBInput_2_trimTable_columnName.add("CONTACTTITLE");

				tDBInput_2_trimTable_columnName.add("ADDRESS");

				tDBInput_2_trimTable_columnName.add("CITY");

				tDBInput_2_trimTable_columnName.add("REGION");

				tDBInput_2_trimTable_columnName.add("POSTALCODE");

				tDBInput_2_trimTable_columnName.add("COUNTRY");

				tDBInput_2_trimTable_columnName.add("PHONE");

				tDBInput_2_trimTable_columnName.add("FAX");

				tDBInput_2_trimTable_columnName.add("START_DATE");

				tDBInput_2_trimTable_columnName.add("END_DATE");

				tDBInput_2_trimTable_columnName.add("ACTIVE_STATUS");

				tDBInput_2_trimTable_columnName.add("VERSION");

				((org.talend.daikon.properties.Properties) props_tDBInput_2.trimTable).setValue("columnName",
						tDBInput_2_trimTable_columnName);

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBInput_2.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBInput_2 = props_tDBInput_2.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBInput_2 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBInput_2 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBInput_2 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBInput_2.referencedComponent.setReference(referencedComponentProperties_tDBInput_2);
					}
				}
				globalMap.put("tDBInput_2_COMPONENT_RUNTIME_PROPERTIES", props_tDBInput_2);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
				java.net.URL mappings_url_tDBInput_2 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBInput_2_MAPPINGS_URL", mappings_url_tDBInput_2);

				org.talend.components.api.container.RuntimeContainer container_tDBInput_2 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBInput_2";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBInput_2 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBInput_2 = null;
				topology_tDBInput_2 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBInput_2 = def_tDBInput_2.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBInput_2,
						topology_tDBInput_2);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBInput_2 = def_tDBInput_2
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBInput_2 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBInput_2.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBInput_2 = componentRuntime_tDBInput_2
						.initialize(container_tDBInput_2, props_tDBInput_2);

				if (initVr_tDBInput_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBInput_2.getMessage());
				}

				if (componentRuntime_tDBInput_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBInput_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBInput_2;
					compDriverInitialization_tDBInput_2.runAtDriver(container_tDBInput_2);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBInput_2 = null;
				if (componentRuntime_tDBInput_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBInput_2 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBInput_2;
					org.talend.daikon.properties.ValidationResult vr_tDBInput_2 = sourceOrSink_tDBInput_2
							.validate(container_tDBInput_2);
					if (vr_tDBInput_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
						throw new RuntimeException(vr_tDBInput_2.getMessage());
					}
				}

				org.talend.components.api.component.runtime.Source source_tDBInput_2 = (org.talend.components.api.component.runtime.Source) sourceOrSink_tDBInput_2;
				org.talend.components.api.component.runtime.Reader reader_tDBInput_2 = source_tDBInput_2
						.createReader(container_tDBInput_2);
				reader_tDBInput_2 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tDBInput_2,
						container_tDBInput_2);

				boolean multi_output_is_allowed_tDBInput_2 = false;
				org.talend.components.api.component.Connector c_tDBInput_2 = null;
				for (org.talend.components.api.component.Connector currentConnector : props_tDBInput_2
						.getAvailableConnectors(null, true)) {
					if (currentConnector.getName().equals("MAIN")) {
						c_tDBInput_2 = currentConnector;
					}

					if (currentConnector.getName().equals("REJECT")) {// it's better to move the code to javajet
						multi_output_is_allowed_tDBInput_2 = true;
					}
				}
				org.apache.avro.Schema schema_tDBInput_2 = props_tDBInput_2.getSchema(c_tDBInput_2, true);

				org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tDBInput_2 = org.talend.codegen.enforcer.EnforcerCreator
						.createOutgoingEnforcer(schema_tDBInput_2, false);

				// Create a reusable factory that converts the output of the reader to an
				// IndexedRecord.
				org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tDBInput_2 = null;

				// Iterate through the incoming data.
				boolean available_tDBInput_2 = reader_tDBInput_2.start();

				resourceMap.put("reader_tDBInput_2", reader_tDBInput_2);

				for (; available_tDBInput_2; available_tDBInput_2 = reader_tDBInput_2.advance()) {
					nb_line_tDBInput_2++;

					if (multi_output_is_allowed_tDBInput_2) {
						row4 = null;

					}

					try {
						Object data_tDBInput_2 = reader_tDBInput_2.getCurrent();

						if (multi_output_is_allowed_tDBInput_2) {
							row4 = new row4Struct();
						}

						// Construct the factory once when the first data arrives.
						if (factory_tDBInput_2 == null) {
							factory_tDBInput_2 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>) new org.talend.daikon.avro.AvroRegistry()
									.createIndexedRecordConverter(data_tDBInput_2.getClass());
						}

						// Enforce the outgoing schema on the input.
						outgoingEnforcer_tDBInput_2.setWrapped(factory_tDBInput_2.convertToAvro(data_tDBInput_2));
						Object columnValue_0_tDBInput_2 = outgoingEnforcer_tDBInput_2.get(0);
						if (columnValue_0_tDBInput_2 == null) {
							row4.SK = 0;
						} else {
							row4.SK = (int) (columnValue_0_tDBInput_2);
						}
						Object columnValue_1_tDBInput_2 = outgoingEnforcer_tDBInput_2.get(1);
						row4.CUSTOMERID = (String) (columnValue_1_tDBInput_2);
						Object columnValue_2_tDBInput_2 = outgoingEnforcer_tDBInput_2.get(2);
						row4.COMPANYNAME = (String) (columnValue_2_tDBInput_2);
						Object columnValue_3_tDBInput_2 = outgoingEnforcer_tDBInput_2.get(3);
						row4.CONTACTNAME = (String) (columnValue_3_tDBInput_2);
						Object columnValue_4_tDBInput_2 = outgoingEnforcer_tDBInput_2.get(4);
						row4.CONTACTTITLE = (String) (columnValue_4_tDBInput_2);
						Object columnValue_5_tDBInput_2 = outgoingEnforcer_tDBInput_2.get(5);
						row4.ADDRESS = (String) (columnValue_5_tDBInput_2);
						Object columnValue_6_tDBInput_2 = outgoingEnforcer_tDBInput_2.get(6);
						row4.CITY = (String) (columnValue_6_tDBInput_2);
						Object columnValue_7_tDBInput_2 = outgoingEnforcer_tDBInput_2.get(7);
						row4.REGION = (String) (columnValue_7_tDBInput_2);
						Object columnValue_8_tDBInput_2 = outgoingEnforcer_tDBInput_2.get(8);
						row4.POSTALCODE = (String) (columnValue_8_tDBInput_2);
						Object columnValue_9_tDBInput_2 = outgoingEnforcer_tDBInput_2.get(9);
						row4.COUNTRY = (String) (columnValue_9_tDBInput_2);
						Object columnValue_10_tDBInput_2 = outgoingEnforcer_tDBInput_2.get(10);
						row4.PHONE = (String) (columnValue_10_tDBInput_2);
						Object columnValue_11_tDBInput_2 = outgoingEnforcer_tDBInput_2.get(11);
						row4.FAX = (String) (columnValue_11_tDBInput_2);
						Object columnValue_12_tDBInput_2 = outgoingEnforcer_tDBInput_2.get(12);
						row4.START_DATE = (java.util.Date) (columnValue_12_tDBInput_2);
						Object columnValue_13_tDBInput_2 = outgoingEnforcer_tDBInput_2.get(13);
						row4.END_DATE = (java.util.Date) (columnValue_13_tDBInput_2);
						Object columnValue_14_tDBInput_2 = outgoingEnforcer_tDBInput_2.get(14);
						row4.ACTIVE_STATUS = (Integer) (columnValue_14_tDBInput_2);
						Object columnValue_15_tDBInput_2 = outgoingEnforcer_tDBInput_2.get(15);
						row4.VERSION = (Integer) (columnValue_15_tDBInput_2);
					} catch (org.talend.components.api.exception.DataRejectException e_tDBInput_2) {
						java.util.Map<String, Object> info_tDBInput_2 = e_tDBInput_2.getRejectInfo();
						// TODO use a method instead of getting method by the special key
						// "error/errorMessage"
						Object errorMessage_tDBInput_2 = null;
						if (info_tDBInput_2.containsKey("error")) {
							errorMessage_tDBInput_2 = info_tDBInput_2.get("error");
						} else if (info_tDBInput_2.containsKey("errorMessage")) {
							errorMessage_tDBInput_2 = info_tDBInput_2.get("errorMessage");
						} else {
							errorMessage_tDBInput_2 = "Rejected but error message missing";
						}
						errorMessage_tDBInput_2 = "Row " + nb_line_tDBInput_2 + ": " + errorMessage_tDBInput_2;
						System.err.println(errorMessage_tDBInput_2);
						// If the record is reject, the main line record should put NULL
						row4 = null;
					}
					java.lang.Iterable<?> outgoingMainRecordsList_tDBInput_2 = new java.util.ArrayList<Object>();
					java.util.Iterator outgoingMainRecordsIt_tDBInput_2 = null;

					/**
					 * [tDBInput_2 begin ] stop
					 */

					/**
					 * [tDBInput_2 main ] start
					 */

					currentComponent = "tDBInput_2";

					tos_count_tDBInput_2++;

					/**
					 * [tDBInput_2 main ] stop
					 */

					/**
					 * [tDBInput_2 process_data_begin ] start
					 */

					currentComponent = "tDBInput_2";

					/**
					 * [tDBInput_2 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_3 main ] start
					 */

					currentComponent = "tLogRow_3";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
					}

///////////////////////		

					String[] row_tLogRow_3 = new String[16];

					row_tLogRow_3[0] = String.valueOf(row4.SK);

					if (row4.CUSTOMERID != null) { //
						row_tLogRow_3[1] = String.valueOf(row4.CUSTOMERID);

					} //

					if (row4.COMPANYNAME != null) { //
						row_tLogRow_3[2] = String.valueOf(row4.COMPANYNAME);

					} //

					if (row4.CONTACTNAME != null) { //
						row_tLogRow_3[3] = String.valueOf(row4.CONTACTNAME);

					} //

					if (row4.CONTACTTITLE != null) { //
						row_tLogRow_3[4] = String.valueOf(row4.CONTACTTITLE);

					} //

					if (row4.ADDRESS != null) { //
						row_tLogRow_3[5] = String.valueOf(row4.ADDRESS);

					} //

					if (row4.CITY != null) { //
						row_tLogRow_3[6] = String.valueOf(row4.CITY);

					} //

					if (row4.REGION != null) { //
						row_tLogRow_3[7] = String.valueOf(row4.REGION);

					} //

					if (row4.POSTALCODE != null) { //
						row_tLogRow_3[8] = String.valueOf(row4.POSTALCODE);

					} //

					if (row4.COUNTRY != null) { //
						row_tLogRow_3[9] = String.valueOf(row4.COUNTRY);

					} //

					if (row4.PHONE != null) { //
						row_tLogRow_3[10] = String.valueOf(row4.PHONE);

					} //

					if (row4.FAX != null) { //
						row_tLogRow_3[11] = String.valueOf(row4.FAX);

					} //

					if (row4.START_DATE != null) { //
						row_tLogRow_3[12] = FormatterUtils.format_Date(row4.START_DATE, "dd-MM-yyyy");

					} //

					if (row4.END_DATE != null) { //
						row_tLogRow_3[13] = FormatterUtils.format_Date(row4.END_DATE, "dd-MM-yyyy");

					} //

					if (row4.ACTIVE_STATUS != null) { //
						row_tLogRow_3[14] = String.valueOf(row4.ACTIVE_STATUS);

					} //

					if (row4.VERSION != null) { //
						row_tLogRow_3[15] = String.valueOf(row4.VERSION);

					} //

					util_tLogRow_3.addRow(row_tLogRow_3);
					nb_line_tLogRow_3++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_3++;

					/**
					 * [tLogRow_3 main ] stop
					 */

					/**
					 * [tLogRow_3 process_data_begin ] start
					 */

					currentComponent = "tLogRow_3";

					/**
					 * [tLogRow_3 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_3 process_data_end ] start
					 */

					currentComponent = "tLogRow_3";

					/**
					 * [tLogRow_3 process_data_end ] stop
					 */

					/**
					 * [tDBInput_2 process_data_end ] start
					 */

					currentComponent = "tDBInput_2";

					/**
					 * [tDBInput_2 process_data_end ] stop
					 */

					/**
					 * [tDBInput_2 end ] start
					 */

					currentComponent = "tDBInput_2";

// end of generic

					resourceMap.put("finish_tDBInput_2", Boolean.TRUE);

				} // while
				reader_tDBInput_2.close();
				final java.util.Map<String, Object> resultMap_tDBInput_2 = reader_tDBInput_2.getReturnValues();
				if (resultMap_tDBInput_2 != null) {
					for (java.util.Map.Entry<String, Object> entry_tDBInput_2 : resultMap_tDBInput_2.entrySet()) {
						switch (entry_tDBInput_2.getKey()) {
						case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE:
							container_tDBInput_2.setComponentData("tDBInput_2", "ERROR_MESSAGE",
									entry_tDBInput_2.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT:
							container_tDBInput_2.setComponentData("tDBInput_2", "NB_LINE", entry_tDBInput_2.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT:
							container_tDBInput_2.setComponentData("tDBInput_2", "NB_SUCCESS",
									entry_tDBInput_2.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT:
							container_tDBInput_2.setComponentData("tDBInput_2", "NB_REJECT",
									entry_tDBInput_2.getValue());
							break;
						default:
							StringBuilder studio_key_tDBInput_2 = new StringBuilder();
							for (int i_tDBInput_2 = 0; i_tDBInput_2 < entry_tDBInput_2.getKey()
									.length(); i_tDBInput_2++) {
								char ch_tDBInput_2 = entry_tDBInput_2.getKey().charAt(i_tDBInput_2);
								if (Character.isUpperCase(ch_tDBInput_2) && i_tDBInput_2 > 0) {
									studio_key_tDBInput_2.append('_');
								}
								studio_key_tDBInput_2.append(ch_tDBInput_2);
							}
							container_tDBInput_2.setComponentData("tDBInput_2",
									studio_key_tDBInput_2.toString().toUpperCase(java.util.Locale.ENGLISH),
									entry_tDBInput_2.getValue());
							break;
						}
					}
				}

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

//////

				java.io.PrintStream consoleOut_tLogRow_3 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
				}

				consoleOut_tLogRow_3.println(util_tLogRow_3.format().toString());
				consoleOut_tLogRow_3.flush();
//////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
			}

			tDBCommit_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

// finally of generic

				if (resourceMap.get("finish_tDBInput_2") == null) {
					if (resourceMap.get("reader_tDBInput_2") != null) {
						try {
							((org.talend.components.api.component.runtime.Reader) resourceMap.get("reader_tDBInput_2"))
									.close();
						} catch (java.io.IOException e_tDBInput_2) {
							String errorMessage_tDBInput_2 = "failed to release the resource in tDBInput_2 :"
									+ e_tDBInput_2.getMessage();
							System.err.println(errorMessage_tDBInput_2);
						}
					}
				}

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				org.talend.components.api.component.ComponentDefinition def_tDBClose_1 = new org.talend.components.jdbc.tjdbcclose.TJDBCCloseDefinition();

				org.talend.components.jdbc.tjdbcclose.TJDBCCloseProperties props_tDBClose_1 = (org.talend.components.jdbc.tjdbcclose.TJDBCCloseProperties) def_tDBClose_1
						.createRuntimeProperties();
				props_tDBClose_1.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBClose_1.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBClose_1.referencedComponent.setValue("referenceDefinitionName", "tJDBCConnection");

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBClose_1.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBClose_1 = props_tDBClose_1.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBClose_1 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBClose_1 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBClose_1 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBClose_1.referencedComponent.setReference(referencedComponentProperties_tDBClose_1);
					}
				}
				globalMap.put("tDBClose_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBClose_1);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
				java.net.URL mappings_url_tDBClose_1 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBClose_1_MAPPINGS_URL", mappings_url_tDBClose_1);

				org.talend.components.api.container.RuntimeContainer container_tDBClose_1 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBClose_1";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBClose_1 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBClose_1 = null;
				topology_tDBClose_1 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBClose_1 = def_tDBClose_1.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBClose_1,
						topology_tDBClose_1);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBClose_1 = def_tDBClose_1
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBClose_1 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBClose_1.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBClose_1 = componentRuntime_tDBClose_1
						.initialize(container_tDBClose_1, props_tDBClose_1);

				if (initVr_tDBClose_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBClose_1.getMessage());
				}

				if (componentRuntime_tDBClose_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBClose_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBClose_1;
					compDriverInitialization_tDBClose_1.runAtDriver(container_tDBClose_1);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBClose_1 = null;
				if (componentRuntime_tDBClose_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBClose_1 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBClose_1;
					org.talend.daikon.properties.ValidationResult vr_tDBClose_1 = sourceOrSink_tDBClose_1
							.validate(container_tDBClose_1);
					if (vr_tDBClose_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
						throw new RuntimeException(vr_tDBClose_1.getMessage());
					}
				}

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

// end of generic

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				/**
				 * [tDBClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

// finally of generic

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_1 begin ] start
				 */

				ok_Hash.put("tDBCommit_1", false);
				start_Hash.put("tDBCommit_1", System.currentTimeMillis());

				currentComponent = "tDBCommit_1";

				int tos_count_tDBCommit_1 = 0;

				org.talend.components.api.component.ComponentDefinition def_tDBCommit_1 = new org.talend.components.jdbc.tjdbccommit.TJDBCCommitDefinition();

				org.talend.components.jdbc.tjdbccommit.TJDBCCommitProperties props_tDBCommit_1 = (org.talend.components.jdbc.tjdbccommit.TJDBCCommitProperties) def_tDBCommit_1
						.createRuntimeProperties();
				props_tDBCommit_1.setValue("closeConnection", true);

				props_tDBCommit_1.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tDBCommit_1.referencedComponent.setValue("componentInstanceId", "tDBConnection_1");

				props_tDBCommit_1.referencedComponent.setValue("referenceDefinitionName", "tJDBCConnection");

				class SchemaSettingTool_tDBCommit_1_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBCommit_1_1_fisrt sst_tDBCommit_1_1_fisrt = new SchemaSettingTool_tDBCommit_1_1_fisrt();

				props_tDBCommit_1.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBCommit_1_1_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBCommit_1_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"EmptyRecord\",\"fields\":[]}", s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBCommit_1_2_fisrt sst_tDBCommit_1_2_fisrt = new SchemaSettingTool_tDBCommit_1_2_fisrt();

				props_tDBCommit_1.schemaFlow.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBCommit_1_2_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBCommit_1.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBCommit_1 = props_tDBCommit_1.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBCommit_1 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBCommit_1 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBCommit_1 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBCommit_1.referencedComponent.setReference(referencedComponentProperties_tDBCommit_1);
					}
				}
				globalMap.put("tDBCommit_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBCommit_1);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
				java.net.URL mappings_url_tDBCommit_1 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBCommit_1_MAPPINGS_URL", mappings_url_tDBCommit_1);

				org.talend.components.api.container.RuntimeContainer container_tDBCommit_1 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBCommit_1";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBCommit_1 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBCommit_1 = null;
				topology_tDBCommit_1 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBCommit_1 = def_tDBCommit_1.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBCommit_1,
						topology_tDBCommit_1);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBCommit_1 = def_tDBCommit_1
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBCommit_1 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBCommit_1.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBCommit_1 = componentRuntime_tDBCommit_1
						.initialize(container_tDBCommit_1, props_tDBCommit_1);

				if (initVr_tDBCommit_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBCommit_1.getMessage());
				}

				if (componentRuntime_tDBCommit_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBCommit_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBCommit_1;
					compDriverInitialization_tDBCommit_1.runAtDriver(container_tDBCommit_1);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBCommit_1 = null;
				if (componentRuntime_tDBCommit_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBCommit_1 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBCommit_1;
					org.talend.daikon.properties.ValidationResult vr_tDBCommit_1 = sourceOrSink_tDBCommit_1
							.validate(container_tDBCommit_1);
					if (vr_tDBCommit_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
						throw new RuntimeException(vr_tDBCommit_1.getMessage());
					}
				}

				/**
				 * [tDBCommit_1 begin ] stop
				 */

				/**
				 * [tDBCommit_1 main ] start
				 */

				currentComponent = "tDBCommit_1";

				tos_count_tDBCommit_1++;

				/**
				 * [tDBCommit_1 main ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_end ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_1 end ] start
				 */

				currentComponent = "tDBCommit_1";

// end of generic

				resourceMap.put("finish_tDBCommit_1", Boolean.TRUE);

				ok_Hash.put("tDBCommit_1", true);
				end_Hash.put("tDBCommit_1", System.currentTimeMillis());

				/**
				 * [tDBCommit_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_1 finally ] start
				 */

				currentComponent = "tDBCommit_1";

// finally of generic

				if (resourceMap.get("finish_tDBCommit_1") == null) {
				}

				/**
				 * [tDBCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	private final org.talend.components.common.runtime.SharedConnectionsPool connectionPool = new org.talend.components.common.runtime.SharedConnectionsPool() {
		public java.sql.Connection getDBConnection(String dbDriver, String url, String userName, String password,
				String dbConnectionName) throws ClassNotFoundException, java.sql.SQLException {
			return SharedDBConnection.getDBConnection(dbDriver, url, userName, password, dbConnectionName);
		}

		public java.sql.Connection getDBConnection(String dbDriver, String url, String dbConnectionName)
				throws ClassNotFoundException, java.sql.SQLException {
			return SharedDBConnection.getDBConnection(dbDriver, url, dbConnectionName);
		}
	};

	private static final String GLOBAL_CONNECTION_POOL_KEY = "GLOBAL_CONNECTION_POOL";

	{
		globalMap.put(GLOBAL_CONNECTION_POOL_KEY, connectionPool);
	}

	public static void main(String[] args) {
		final Customers_SCD Customers_SCDClass = new Customers_SCD();

		int exitCode = Customers_SCDClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Customers_SCD.class.getClassLoader().getResourceAsStream(
					"test_talend_big_data/customers_scd_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Customers_SCD.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("isInit", "id_Integer");
					try {
						context.isInit = routines.system.ParserUtils.parseTo_Integer(context.getProperty("isInit"));
					} catch (NumberFormatException e) {
						System.err.println(String.format("Null value will be used for context parameter %s: %s",
								"isInit", e.getMessage()));
						context.isInit = null;
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("isInit")) {
				context.isInit = (Integer) parentContextMap.get("isInit");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBConnection_1) {
			globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

			e_tDBConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Customers_SCD");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 249774 characters generated by Talend Open Studio for Big Data on the
 * December 24, 2020 10:41:43 AM ICT
 ************************************************************************************************/