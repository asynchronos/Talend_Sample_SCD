// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package test_talend_big_data.customers_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Customers Purpose: <br>
 * Description: <br>
 * 
 * @author prakit.si@yipintsoi.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Customers implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (snowflake_conn != null) {

				this.setProperty("snowflake_conn", snowflake_conn.toString());

			}

			if (snowflake_demo_db_conn != null) {

				this.setProperty("snowflake_demo_db_conn", snowflake_demo_db_conn.toString());

			}

		}

		public String snowflake_conn;

		public String getSnowflake_conn() {
			return this.snowflake_conn;
		}

		public String snowflake_demo_db_conn;

		public String getSnowflake_demo_db_conn() {
			return this.snowflake_demo_db_conn;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Customers";
	private final String projectName = "TEST_TALEND_BIG_DATA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Customers.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Customers.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TEST_TALEND_BIG_DATA_Customers = new byte[0];
		static byte[] commonByteArray_TEST_TALEND_BIG_DATA_Customers = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String CompanyName;

		public String getCompanyName() {
			return this.CompanyName;
		}

		public String ContactName;

		public String getContactName() {
			return this.ContactName;
		}

		public String ContactTitle;

		public String getContactTitle() {
			return this.ContactTitle;
		}

		public String Address;

		public String getAddress() {
			return this.Address;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String PostalCode;

		public String getPostalCode() {
			return this.PostalCode;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Fax;

		public String getFax() {
			return this.Fax;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.CustomerID == null) {
				if (other.CustomerID != null)
					return false;

			} else if (!this.CustomerID.equals(other.CustomerID))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.CustomerID = this.CustomerID;
			other.CompanyName = this.CompanyName;
			other.ContactName = this.ContactName;
			other.ContactTitle = this.ContactTitle;
			other.Address = this.Address;
			other.City = this.City;
			other.Region = this.Region;
			other.PostalCode = this.PostalCode;
			other.Country = this.Country;
			other.Phone = this.Phone;
			other.Fax = this.Fax;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_TALEND_BIG_DATA_Customers.length) {
					if (length < 1024 && commonByteArray_TEST_TALEND_BIG_DATA_Customers.length == 0) {
						commonByteArray_TEST_TALEND_BIG_DATA_Customers = new byte[1024];
					} else {
						commonByteArray_TEST_TALEND_BIG_DATA_Customers = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_TALEND_BIG_DATA_Customers, 0, length);
				strReturn = new String(commonByteArray_TEST_TALEND_BIG_DATA_Customers, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_TALEND_BIG_DATA_Customers) {

				try {

					int length = 0;

					this.CustomerID = readString(dis);

					this.CompanyName = readString(dis);

					this.ContactName = readString(dis);

					this.ContactTitle = readString(dis);

					this.Address = readString(dis);

					this.City = readString(dis);

					this.Region = readString(dis);

					this.PostalCode = readString(dis);

					this.Country = readString(dis);

					this.Phone = readString(dis);

					this.Fax = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.CompanyName, dos);

				// String

				writeString(this.ContactName, dos);

				// String

				writeString(this.ContactTitle, dos);

				// String

				writeString(this.Address, dos);

				// String

				writeString(this.City, dos);

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.PostalCode, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Fax, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + CustomerID);
			sb.append(",CompanyName=" + CompanyName);
			sb.append(",ContactName=" + ContactName);
			sb.append(",ContactTitle=" + ContactTitle);
			sb.append(",Address=" + Address);
			sb.append(",City=" + City);
			sb.append(",Region=" + Region);
			sb.append(",PostalCode=" + PostalCode);
			sb.append(",Country=" + Country);
			sb.append(",Phone=" + Phone);
			sb.append(",Fax=" + Fax);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TEST_TALEND_BIG_DATA_Customers = new byte[0];
		static byte[] commonByteArray_TEST_TALEND_BIG_DATA_Customers = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String CompanyName;

		public String getCompanyName() {
			return this.CompanyName;
		}

		public String ContactName;

		public String getContactName() {
			return this.ContactName;
		}

		public String ContactTitle;

		public String getContactTitle() {
			return this.ContactTitle;
		}

		public String Address;

		public String getAddress() {
			return this.Address;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String PostalCode;

		public String getPostalCode() {
			return this.PostalCode;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Fax;

		public String getFax() {
			return this.Fax;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.CustomerID == null) {
				if (other.CustomerID != null)
					return false;

			} else if (!this.CustomerID.equals(other.CustomerID))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.CustomerID = this.CustomerID;
			other.CompanyName = this.CompanyName;
			other.ContactName = this.ContactName;
			other.ContactTitle = this.ContactTitle;
			other.Address = this.Address;
			other.City = this.City;
			other.Region = this.Region;
			other.PostalCode = this.PostalCode;
			other.Country = this.Country;
			other.Phone = this.Phone;
			other.Fax = this.Fax;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_TALEND_BIG_DATA_Customers.length) {
					if (length < 1024 && commonByteArray_TEST_TALEND_BIG_DATA_Customers.length == 0) {
						commonByteArray_TEST_TALEND_BIG_DATA_Customers = new byte[1024];
					} else {
						commonByteArray_TEST_TALEND_BIG_DATA_Customers = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_TALEND_BIG_DATA_Customers, 0, length);
				strReturn = new String(commonByteArray_TEST_TALEND_BIG_DATA_Customers, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_TALEND_BIG_DATA_Customers) {

				try {

					int length = 0;

					this.CustomerID = readString(dis);

					this.CompanyName = readString(dis);

					this.ContactName = readString(dis);

					this.ContactTitle = readString(dis);

					this.Address = readString(dis);

					this.City = readString(dis);

					this.Region = readString(dis);

					this.PostalCode = readString(dis);

					this.Country = readString(dis);

					this.Phone = readString(dis);

					this.Fax = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.CompanyName, dos);

				// String

				writeString(this.ContactName, dos);

				// String

				writeString(this.ContactTitle, dos);

				// String

				writeString(this.Address, dos);

				// String

				writeString(this.City, dos);

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.PostalCode, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Fax, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + CustomerID);
			sb.append(",CompanyName=" + CompanyName);
			sb.append(",ContactName=" + ContactName);
			sb.append(",ContactTitle=" + ContactTitle);
			sb.append(",Address=" + Address);
			sb.append(",City=" + City);
			sb.append(",Region=" + Region);
			sb.append(",PostalCode=" + PostalCode);
			sb.append(",Country=" + Country);
			sb.append(",Phone=" + Phone);
			sb.append(",Fax=" + Fax);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TEST_TALEND_BIG_DATA_Customers = new byte[0];
		static byte[] commonByteArray_TEST_TALEND_BIG_DATA_Customers = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String CompanyName;

		public String getCompanyName() {
			return this.CompanyName;
		}

		public String ContactName;

		public String getContactName() {
			return this.ContactName;
		}

		public String ContactTitle;

		public String getContactTitle() {
			return this.ContactTitle;
		}

		public String Address;

		public String getAddress() {
			return this.Address;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String PostalCode;

		public String getPostalCode() {
			return this.PostalCode;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Fax;

		public String getFax() {
			return this.Fax;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.CustomerID == null) {
				if (other.CustomerID != null)
					return false;

			} else if (!this.CustomerID.equals(other.CustomerID))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.CustomerID = this.CustomerID;
			other.CompanyName = this.CompanyName;
			other.ContactName = this.ContactName;
			other.ContactTitle = this.ContactTitle;
			other.Address = this.Address;
			other.City = this.City;
			other.Region = this.Region;
			other.PostalCode = this.PostalCode;
			other.Country = this.Country;
			other.Phone = this.Phone;
			other.Fax = this.Fax;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_TALEND_BIG_DATA_Customers.length) {
					if (length < 1024 && commonByteArray_TEST_TALEND_BIG_DATA_Customers.length == 0) {
						commonByteArray_TEST_TALEND_BIG_DATA_Customers = new byte[1024];
					} else {
						commonByteArray_TEST_TALEND_BIG_DATA_Customers = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_TALEND_BIG_DATA_Customers, 0, length);
				strReturn = new String(commonByteArray_TEST_TALEND_BIG_DATA_Customers, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_TALEND_BIG_DATA_Customers) {

				try {

					int length = 0;

					this.CustomerID = readString(dis);

					this.CompanyName = readString(dis);

					this.ContactName = readString(dis);

					this.ContactTitle = readString(dis);

					this.Address = readString(dis);

					this.City = readString(dis);

					this.Region = readString(dis);

					this.PostalCode = readString(dis);

					this.Country = readString(dis);

					this.Phone = readString(dis);

					this.Fax = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.CompanyName, dos);

				// String

				writeString(this.ContactName, dos);

				// String

				writeString(this.ContactTitle, dos);

				// String

				writeString(this.Address, dos);

				// String

				writeString(this.City, dos);

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.PostalCode, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Fax, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + CustomerID);
			sb.append(",CompanyName=" + CompanyName);
			sb.append(",ContactName=" + ContactName);
			sb.append(",ContactTitle=" + ContactTitle);
			sb.append(",Address=" + Address);
			sb.append(",City=" + City);
			sb.append(",Region=" + Region);
			sb.append(",PostalCode=" + PostalCode);
			sb.append(",Country=" + Country);
			sb.append(",Phone=" + Phone);
			sb.append(",Fax=" + Fax);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row1Struct row2 = row1;
				row3Struct row3 = new row3Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tDBOutput_1 = 0;

				org.talend.components.api.component.ComponentDefinition def_tDBOutput_1 = new org.talend.components.jdbc.tjdbcoutput.TJDBCOutputDefinition();

				org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties props_tDBOutput_1 = (org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties) def_tDBOutput_1
						.createRuntimeProperties();
				props_tDBOutput_1.setValue("dataAction",
						org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties.DataAction.INSERT);

				props_tDBOutput_1.setValue("clearDataInTable", true);

				props_tDBOutput_1.setValue("dieOnError", false);

				props_tDBOutput_1.setValue("useDataSource", false);

				props_tDBOutput_1.setValue("commitEvery", 10000);

				props_tDBOutput_1.setValue("enableFieldOptions", false);

				props_tDBOutput_1.setValue("debug", false);

				props_tDBOutput_1.setValue("useBatch", true);

				props_tDBOutput_1.setValue("batchSize", 10000);

				props_tDBOutput_1.referencedComponent.setValue("referenceDefinitionName", "tJDBCConnection");

				props_tDBOutput_1.connection.setValue("jdbcUrl",
						"jdbc:snowflake://jp37205.southeast-asia.azure.snowflakecomputing.com/?db=demo_db&schema=public");

				props_tDBOutput_1.connection.setValue("driverClass", "net.snowflake.client.jdbc.SnowflakeDriver");

				java.util.List<Object> tDBOutput_1_connection_driverTable_drivers = new java.util.ArrayList<Object>();

				tDBOutput_1_connection_driverTable_drivers.add("mvn:net.snowflake/snowflake-jdbc/3.11.1/jar");

				((org.talend.daikon.properties.Properties) props_tDBOutput_1.connection.driverTable).setValue("drivers",
						tDBOutput_1_connection_driverTable_drivers);

				props_tDBOutput_1.connection.userPassword.setValue("useAuth", false);

				props_tDBOutput_1.connection.userPassword.setValue("userId", "prakitsi");

				props_tDBOutput_1.connection.userPassword.setValue("password",
						routines.system.PasswordEncryptUtil.decryptPassword(
								"enc:routine.encryption.key.v1:MtlmkmFN5M+TDQpOp1zJNWJiHPZ0bl2Hsu0rhl5uTOD2aHoqXQ=="));

				props_tDBOutput_1.tableSelection.setValue("tablename", "CUSTOMERS");

				class SchemaSettingTool_tDBOutput_1_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"Customers\",\"fields\":[{", s);

						a("\"name\":\"CustomerID\",\"type\":\"string\",\"talend.field.dbType\":\"NCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"CustomerID\",\"talend.field.precision\":\"0\",\"talend.field.isKey\":\"true\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"CustomerID\",\"di.prop.Comment\":\"\",\"talend.field.length\":\"5\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CompanyName\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"NVARCHAR\",\"talend.field.dbColumnName\":\"CompanyName\",\"di.prop.Comment\":\"\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"40\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"CompanyName\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"ContactName\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"ContactName\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"ContactName\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"30\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"ContactTitle\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"ContactTitle\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"ContactTitle\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"30\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"Address\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"Address\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"Address\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"60\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"City\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"City\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"City\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"Region\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"Region\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"Region\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"PostalCode\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"PostalCode\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"PostalCode\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"Country\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"Country\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"Country\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"Phone\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"Phone\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"Phone\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"24\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"Fax\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"Fax\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"Fax\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"24\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tDBOutput_1\",\"di.table.label\":\"Customers\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBOutput_1_1_fisrt sst_tDBOutput_1_1_fisrt = new SchemaSettingTool_tDBOutput_1_1_fisrt();

				props_tDBOutput_1.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_1_1_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBOutput_1_2_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"Customers\",\"fields\":[{", s);

						a("\"name\":\"CustomerID\",\"type\":\"string\",\"talend.field.dbType\":\"NCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"CustomerID\",\"talend.field.precision\":\"0\",\"talend.field.isKey\":\"true\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"CustomerID\",\"di.prop.Comment\":\"\",\"talend.field.length\":\"5\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CompanyName\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"NVARCHAR\",\"talend.field.dbColumnName\":\"CompanyName\",\"di.prop.Comment\":\"\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"40\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"CompanyName\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"ContactName\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"ContactName\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"ContactName\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"30\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"ContactTitle\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"ContactTitle\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"ContactTitle\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"30\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"Address\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"Address\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"Address\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"60\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"City\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"City\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"City\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"Region\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"Region\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"Region\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"PostalCode\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"PostalCode\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"PostalCode\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"Country\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"Country\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"Country\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"Phone\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"Phone\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"Phone\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"24\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"Fax\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"Fax\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"Fax\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"24\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tDBOutput_1\",\"di.table.label\":\"Customers\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBOutput_1_2_fisrt sst_tDBOutput_1_2_fisrt = new SchemaSettingTool_tDBOutput_1_2_fisrt();

				props_tDBOutput_1.schemaFlow.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_1_2_fisrt.getSchemaValue()));

				class SchemaSettingTool_tDBOutput_1_3_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"rejectOutput\",\"fields\":[{", s);

						a("\"name\":\"CustomerID\",\"type\":\"string\",\"talend.field.dbType\":\"NCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"CustomerID\",\"talend.field.precision\":\"0\",\"talend.field.isKey\":\"true\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"CustomerID\",\"di.prop.Comment\":\"\",\"talend.field.length\":\"5\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"CompanyName\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"NVARCHAR\",\"talend.field.dbColumnName\":\"CompanyName\",\"di.prop.Comment\":\"\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"40\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"CompanyName\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"ContactName\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"ContactName\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"ContactName\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"30\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"ContactTitle\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"ContactTitle\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"ContactTitle\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"30\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"Address\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"Address\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"Address\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"60\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"City\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"City\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"City\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"Region\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"Region\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"Region\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"PostalCode\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"PostalCode\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"PostalCode\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"Country\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"Country\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"Country\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"15\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"Phone\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"Phone\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"Phone\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"24\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"Fax\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"NVARCHAR\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"Fax\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"Fax\",\"di.prop.Comment\":\"\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"24\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}],\"di.table.name\":\"tDBOutput_1\",\"di.table.label\":\"Customers\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tDBOutput_1_3_fisrt sst_tDBOutput_1_3_fisrt = new SchemaSettingTool_tDBOutput_1_3_fisrt();

				props_tDBOutput_1.schemaReject.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tDBOutput_1_3_fisrt.getSchemaValue()));

				props_tDBOutput_1.additionalColumns.setValue("positions", "BEFORE");

				props_tDBOutput_1.additionalColumns.setValue("referenceColumns", "CustomerID");

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_1.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tDBOutput_1 = props_tDBOutput_1.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tDBOutput_1 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_1 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tDBOutput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
						props_tDBOutput_1.referencedComponent.setReference(referencedComponentProperties_tDBOutput_1);
					}
				}
				globalMap.put("tDBOutput_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBOutput_1);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
				java.net.URL mappings_url_tDBOutput_1 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tDBOutput_1_MAPPINGS_URL", mappings_url_tDBOutput_1);

				org.talend.components.api.container.RuntimeContainer container_tDBOutput_1 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tDBOutput_1";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tDBOutput_1 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tDBOutput_1 = null;
				topology_tDBOutput_1 = org.talend.components.api.component.ConnectorTopology.INCOMING_AND_OUTGOING;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBOutput_1 = def_tDBOutput_1.getRuntimeInfo(
						org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBOutput_1,
						topology_tDBOutput_1);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBOutput_1 = def_tDBOutput_1
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBOutput_1 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tDBOutput_1.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tDBOutput_1 = componentRuntime_tDBOutput_1
						.initialize(container_tDBOutput_1, props_tDBOutput_1);

				if (initVr_tDBOutput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tDBOutput_1.getMessage());
				}

				if (componentRuntime_tDBOutput_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBOutput_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tDBOutput_1;
					compDriverInitialization_tDBOutput_1.runAtDriver(container_tDBOutput_1);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBOutput_1 = null;
				if (componentRuntime_tDBOutput_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tDBOutput_1 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tDBOutput_1;
					org.talend.daikon.properties.ValidationResult vr_tDBOutput_1 = sourceOrSink_tDBOutput_1
							.validate(container_tDBOutput_1);
					if (vr_tDBOutput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
						throw new RuntimeException(vr_tDBOutput_1.getMessage());
					}
				}

				org.talend.components.api.component.runtime.Sink sink_tDBOutput_1 = (org.talend.components.api.component.runtime.Sink) sourceOrSink_tDBOutput_1;
				org.talend.components.api.component.runtime.WriteOperation writeOperation_tDBOutput_1 = sink_tDBOutput_1
						.createWriteOperation();
				writeOperation_tDBOutput_1.initialize(container_tDBOutput_1);
				org.talend.components.api.component.runtime.Writer writer_tDBOutput_1 = writeOperation_tDBOutput_1
						.createWriter(container_tDBOutput_1);
				writer_tDBOutput_1.open("tDBOutput_1");

				resourceMap.put("writer_tDBOutput_1", writer_tDBOutput_1);

				org.talend.components.api.component.Connector c_tDBOutput_1 = null;
				for (org.talend.components.api.component.Connector currentConnector : props_tDBOutput_1
						.getAvailableConnectors(null, false)) {
					if (currentConnector.getName().equals("MAIN")) {
						c_tDBOutput_1 = currentConnector;
						break;
					}
				}
				org.apache.avro.Schema designSchema_tDBOutput_1 = props_tDBOutput_1.getSchema(c_tDBOutput_1, false);
				org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tDBOutput_1 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(
						designSchema_tDBOutput_1);
				c_tDBOutput_1 = null;
				for (org.talend.components.api.component.Connector currentConnector : props_tDBOutput_1
						.getAvailableConnectors(null, true)) {
					if (currentConnector.getName().equals("MAIN")) {
						c_tDBOutput_1 = currentConnector;
					}
				}
				org.apache.avro.Schema mainSchema_tDBOutput_1 = props_tDBOutput_1.getSchema(c_tDBOutput_1, true);
				org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tDBOutput_1OutMain = org.talend.codegen.enforcer.EnforcerCreator
						.createOutgoingEnforcer(mainSchema_tDBOutput_1, false);

				// Create a reusable factory that converts the output of the reader to an
				// IndexedRecord.
				org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tDBOutput_1OutMain = null;
				java.lang.Iterable<?> outgoingMainRecordsList_tDBOutput_1 = new java.util.ArrayList<Object>();
				java.util.Iterator outgoingMainRecordsIt_tDBOutput_1 = null;

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_1 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1);
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:JPcLnT4z9gV0LcFWyksg+VjsJczjTVk3IxfofA==");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String port_tDBInput_1 = "1433";
				String dbname_tDBInput_1 = "Northwind";
				String url_tDBInput_1 = "jdbc:sqlserver://" + "localhost";
				if (!"".equals(port_tDBInput_1)) {
					url_tDBInput_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_1)) {
					url_tDBInput_1 += ";databaseName=" + "Northwind";
				}
				url_tDBInput_1 += ";appName=" + projectName + ";" + "IntegratedSecurity=true";
				String dbschema_tDBInput_1 = "";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT Customers.CustomerID,\n		Customers.CompanyName,\n		Customers.ContactName,\n		Customers.ContactTitle,\n		Customers.Ad"
						+ "dress,\n		Customers.City,\n		Customers.Region,\n		Customers.PostalCode,\n		Customers.Country,\n		Customers.Phone,\n		Customers"
						+ ".Fax\nFROM	Customers";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.CustomerID = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.CustomerID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.CustomerID = tmpContent_tDBInput_1;
								}
							} else {
								row1.CustomerID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.CompanyName = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.CompanyName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.CompanyName = tmpContent_tDBInput_1;
								}
							} else {
								row1.CompanyName = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.ContactName = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.ContactName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.ContactName = tmpContent_tDBInput_1;
								}
							} else {
								row1.ContactName = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.ContactTitle = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.ContactTitle = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.ContactTitle = tmpContent_tDBInput_1;
								}
							} else {
								row1.ContactTitle = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.Address = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(5);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.Address = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.Address = tmpContent_tDBInput_1;
								}
							} else {
								row1.Address = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.City = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(6);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.City = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.City = tmpContent_tDBInput_1;
								}
							} else {
								row1.City = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.Region = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(7);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.Region = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.Region = tmpContent_tDBInput_1;
								}
							} else {
								row1.Region = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.PostalCode = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(8);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.PostalCode = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.PostalCode = tmpContent_tDBInput_1;
								}
							} else {
								row1.PostalCode = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.Country = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(9);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.Country = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.Country = tmpContent_tDBInput_1;
								}
							} else {
								row1.Country = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.Phone = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(10);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.Phone = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.Phone = tmpContent_tDBInput_1;
								}
							} else {
								row1.Phone = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.Fax = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(11);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.Fax = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.Fax = tmpContent_tDBInput_1;
								}
							} else {
								row1.Fax = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_1 main ] start
						 */

						currentComponent = "tLogRow_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

///////////////////////		

						strBuffer_tLogRow_1 = new StringBuilder();

						if (row1.CustomerID != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.CustomerID));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.CompanyName != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.CompanyName));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.ContactName != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.ContactName));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.ContactTitle != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.ContactTitle));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.Address != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.Address));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.City != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.City));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.Region != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.Region));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.PostalCode != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.PostalCode));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.Country != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.Country));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.Phone != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.Phone));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.Fax != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row1.Fax));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_1 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
						}
						consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
						consoleOut_tLogRow_1.flush();
						nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

						row2 = row1;

						tos_count_tLogRow_1++;

						/**
						 * [tLogRow_1 main ] stop
						 */

						/**
						 * [tLogRow_1 process_data_begin ] start
						 */

						currentComponent = "tLogRow_1";

						/**
						 * [tLogRow_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 main ] start
						 */

						currentComponent = "tDBOutput_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
						}

						incomingEnforcer_tDBOutput_1.createNewRecord();
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("CustomerID") != null) {
							incomingEnforcer_tDBOutput_1.put("CustomerID", row2.CustomerID);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("CompanyName") != null) {
							incomingEnforcer_tDBOutput_1.put("CompanyName", row2.CompanyName);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("ContactName") != null) {
							incomingEnforcer_tDBOutput_1.put("ContactName", row2.ContactName);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("ContactTitle") != null) {
							incomingEnforcer_tDBOutput_1.put("ContactTitle", row2.ContactTitle);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("Address") != null) {
							incomingEnforcer_tDBOutput_1.put("Address", row2.Address);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("City") != null) {
							incomingEnforcer_tDBOutput_1.put("City", row2.City);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("Region") != null) {
							incomingEnforcer_tDBOutput_1.put("Region", row2.Region);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("PostalCode") != null) {
							incomingEnforcer_tDBOutput_1.put("PostalCode", row2.PostalCode);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("Country") != null) {
							incomingEnforcer_tDBOutput_1.put("Country", row2.Country);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("Phone") != null) {
							incomingEnforcer_tDBOutput_1.put("Phone", row2.Phone);
						}
						// skip the put action if the input column doesn't appear in component runtime
						// schema
						if (incomingEnforcer_tDBOutput_1.getRuntimeSchema().getField("Fax") != null) {
							incomingEnforcer_tDBOutput_1.put("Fax", row2.Fax);
						}
						org.apache.avro.generic.IndexedRecord data_tDBOutput_1 = incomingEnforcer_tDBOutput_1
								.getCurrentRecord();

						writer_tDBOutput_1.write(data_tDBOutput_1);

						nb_line_tDBOutput_1++;
						if (!(writer_tDBOutput_1 instanceof org.talend.components.api.component.runtime.WriterWithFeedback)) {
							// For no feedback writer,just pass the input record to the output
							if (data_tDBOutput_1 != null) {
								outgoingMainRecordsList_tDBOutput_1 = java.util.Arrays.asList(data_tDBOutput_1);
							}
						}

						tos_count_tDBOutput_1++;

						/**
						 * [tDBOutput_1 main ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_1";

						row3 = null;
						if (writer_tDBOutput_1 instanceof org.talend.components.api.component.runtime.WriterWithFeedback) {
							org.talend.components.api.component.runtime.WriterWithFeedback writerWithFeedbackMain_tDBOutput_1 = (org.talend.components.api.component.runtime.WriterWithFeedback) writer_tDBOutput_1;
							writerWithFeedbackMain_tDBOutput_1 = new org.talend.codegen.flowvariables.runtime.FlowVariablesWriter(
									writerWithFeedbackMain_tDBOutput_1, container_tDBOutput_1);
							java.lang.Iterable<?> outgoingRecs_tDBOutput_1 = writerWithFeedbackMain_tDBOutput_1
									.getSuccessfulWrites();
							java.util.Iterator outgoingMainRecords_tDBOutput_1 = outgoingRecs_tDBOutput_1.iterator();
							Object outgoingMain_tDBOutput_1 = null;
							if (outgoingMainRecords_tDBOutput_1.hasNext()) {
								outgoingMainRecordsList_tDBOutput_1 = outgoingRecs_tDBOutput_1;
							}
						}
						outgoingMainRecordsIt_tDBOutput_1 = outgoingMainRecordsList_tDBOutput_1.iterator();
						while (outgoingMainRecordsIt_tDBOutput_1.hasNext()) { // Start of data processing while block

							if (outgoingMainRecordsIt_tDBOutput_1.hasNext()) {
								row3 = new row3Struct();
								Object outgoingMain_tDBOutput_1 = outgoingMainRecordsIt_tDBOutput_1.next();

								// Construct the factory once when the first data arrives.
								if (factory_tDBOutput_1OutMain == null) {
									factory_tDBOutput_1OutMain = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>) new org.talend.daikon.avro.AvroRegistry()
											.createIndexedRecordConverter(outgoingMain_tDBOutput_1.getClass());
								}

								// Enforce the outgoing schema on the input.
								outgoingEnforcer_tDBOutput_1OutMain
										.setWrapped(factory_tDBOutput_1OutMain.convertToAvro(outgoingMain_tDBOutput_1));
								Object columnValue_0_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(0);
								row3.CustomerID = (String) (columnValue_0_tDBOutput_1OutMain);
								Object columnValue_1_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(1);
								row3.CompanyName = (String) (columnValue_1_tDBOutput_1OutMain);
								Object columnValue_2_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(2);
								row3.ContactName = (String) (columnValue_2_tDBOutput_1OutMain);
								Object columnValue_3_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(3);
								row3.ContactTitle = (String) (columnValue_3_tDBOutput_1OutMain);
								Object columnValue_4_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(4);
								row3.Address = (String) (columnValue_4_tDBOutput_1OutMain);
								Object columnValue_5_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(5);
								row3.City = (String) (columnValue_5_tDBOutput_1OutMain);
								Object columnValue_6_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(6);
								row3.Region = (String) (columnValue_6_tDBOutput_1OutMain);
								Object columnValue_7_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(7);
								row3.PostalCode = (String) (columnValue_7_tDBOutput_1OutMain);
								Object columnValue_8_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(8);
								row3.Country = (String) (columnValue_8_tDBOutput_1OutMain);
								Object columnValue_9_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(9);
								row3.Phone = (String) (columnValue_9_tDBOutput_1OutMain);
								Object columnValue_10_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(10);
								row3.Fax = (String) (columnValue_10_tDBOutput_1OutMain);
							} else {
								row3 = null;
							}

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */
// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tLogRow_2 main ] start
								 */

								currentComponent = "tLogRow_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
								}

///////////////////////		

								strBuffer_tLogRow_2 = new StringBuilder();

								if (row3.CustomerID != null) { //

									strBuffer_tLogRow_2.append(String.valueOf(row3.CustomerID));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row3.CompanyName != null) { //

									strBuffer_tLogRow_2.append(String.valueOf(row3.CompanyName));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row3.ContactName != null) { //

									strBuffer_tLogRow_2.append(String.valueOf(row3.ContactName));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row3.ContactTitle != null) { //

									strBuffer_tLogRow_2.append(String.valueOf(row3.ContactTitle));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row3.Address != null) { //

									strBuffer_tLogRow_2.append(String.valueOf(row3.Address));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row3.City != null) { //

									strBuffer_tLogRow_2.append(String.valueOf(row3.City));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row3.Region != null) { //

									strBuffer_tLogRow_2.append(String.valueOf(row3.Region));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row3.PostalCode != null) { //

									strBuffer_tLogRow_2.append(String.valueOf(row3.PostalCode));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row3.Country != null) { //

									strBuffer_tLogRow_2.append(String.valueOf(row3.Country));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row3.Phone != null) { //

									strBuffer_tLogRow_2.append(String.valueOf(row3.Phone));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row3.Fax != null) { //

									strBuffer_tLogRow_2.append(String.valueOf(row3.Fax));

								} //

								if (globalMap.get("tLogRow_CONSOLE") != null) {
									consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
								} else {
									consoleOut_tLogRow_2 = new java.io.PrintStream(
											new java.io.BufferedOutputStream(System.out));
									globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
								}
								consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
								consoleOut_tLogRow_2.flush();
								nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_2++;

								/**
								 * [tLogRow_2 main ] stop
								 */

								/**
								 * [tLogRow_2 process_data_begin ] start
								 */

								currentComponent = "tLogRow_2";

								/**
								 * [tLogRow_2 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_2 process_data_end ] start
								 */

								currentComponent = "tLogRow_2";

								/**
								 * [tLogRow_2 process_data_end ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

						} // end of data processing while block
						if (writer_tDBOutput_1 instanceof org.talend.components.api.component.runtime.WriterWithFeedback) {
							((org.talend.components.api.component.runtime.WriterWithFeedback) writer_tDBOutput_1)
									.cleanWrites();
						}

						/**
						 * [tDBOutput_1 process_data_end ] stop
						 */

						/**
						 * [tLogRow_1 process_data_end ] start
						 */

						currentComponent = "tLogRow_1";

						/**
						 * [tLogRow_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

// end of generic

				resourceMap.put("finish_tDBOutput_1", Boolean.TRUE);

				org.talend.components.api.component.runtime.Result resultObject_tDBOutput_1 = (org.talend.components.api.component.runtime.Result) writer_tDBOutput_1
						.close();
				final java.util.Map<String, Object> resultMap_tDBOutput_1 = writer_tDBOutput_1.getWriteOperation()
						.finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(
								resultObject_tDBOutput_1), container_tDBOutput_1);
				if (resultMap_tDBOutput_1 != null) {
					for (java.util.Map.Entry<String, Object> entry_tDBOutput_1 : resultMap_tDBOutput_1.entrySet()) {
						switch (entry_tDBOutput_1.getKey()) {
						case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE:
							container_tDBOutput_1.setComponentData("tDBOutput_1", "ERROR_MESSAGE",
									entry_tDBOutput_1.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT:
							container_tDBOutput_1.setComponentData("tDBOutput_1", "NB_LINE",
									entry_tDBOutput_1.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT:
							container_tDBOutput_1.setComponentData("tDBOutput_1", "NB_SUCCESS",
									entry_tDBOutput_1.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT:
							container_tDBOutput_1.setComponentData("tDBOutput_1", "NB_REJECT",
									entry_tDBOutput_1.getValue());
							break;
						default:
							StringBuilder studio_key_tDBOutput_1 = new StringBuilder();
							for (int i_tDBOutput_1 = 0; i_tDBOutput_1 < entry_tDBOutput_1.getKey()
									.length(); i_tDBOutput_1++) {
								char ch_tDBOutput_1 = entry_tDBOutput_1.getKey().charAt(i_tDBOutput_1);
								if (Character.isUpperCase(ch_tDBOutput_1) && i_tDBOutput_1 > 0) {
									studio_key_tDBOutput_1.append('_');
								}
								studio_key_tDBOutput_1.append(ch_tDBOutput_1);
							}
							container_tDBOutput_1.setComponentData("tDBOutput_1",
									studio_key_tDBOutput_1.toString().toUpperCase(java.util.Locale.ENGLISH),
									entry_tDBOutput_1.getValue());
							break;
						}
					}
				}

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 process_data_begin ] start
				 */

				currentComponent = "tDBOutput_1";

				row3 = null;
				if (writer_tDBOutput_1 instanceof org.talend.components.api.component.runtime.WriterWithFeedback) {
					org.talend.components.api.component.runtime.WriterWithFeedback writerWithFeedbackMain_tDBOutput_1 = (org.talend.components.api.component.runtime.WriterWithFeedback) writer_tDBOutput_1;
					writerWithFeedbackMain_tDBOutput_1 = new org.talend.codegen.flowvariables.runtime.FlowVariablesWriter(
							writerWithFeedbackMain_tDBOutput_1, container_tDBOutput_1);
					java.lang.Iterable<?> outgoingRecs_tDBOutput_1 = writerWithFeedbackMain_tDBOutput_1
							.getSuccessfulWrites();
					java.util.Iterator outgoingMainRecords_tDBOutput_1 = outgoingRecs_tDBOutput_1.iterator();
					Object outgoingMain_tDBOutput_1 = null;
					if (outgoingMainRecords_tDBOutput_1.hasNext()) {
						outgoingMainRecordsList_tDBOutput_1 = outgoingRecs_tDBOutput_1;
					}
				}
				outgoingMainRecordsIt_tDBOutput_1 = outgoingMainRecordsList_tDBOutput_1.iterator();
				while (outgoingMainRecordsIt_tDBOutput_1.hasNext()) { // Start of data processing while block

					if (outgoingMainRecordsIt_tDBOutput_1.hasNext()) {
						row3 = new row3Struct();
						Object outgoingMain_tDBOutput_1 = outgoingMainRecordsIt_tDBOutput_1.next();

						// Construct the factory once when the first data arrives.
						if (factory_tDBOutput_1OutMain == null) {
							factory_tDBOutput_1OutMain = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>) new org.talend.daikon.avro.AvroRegistry()
									.createIndexedRecordConverter(outgoingMain_tDBOutput_1.getClass());
						}

						// Enforce the outgoing schema on the input.
						outgoingEnforcer_tDBOutput_1OutMain
								.setWrapped(factory_tDBOutput_1OutMain.convertToAvro(outgoingMain_tDBOutput_1));
						Object columnValue_0_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(0);
						row3.CustomerID = (String) (columnValue_0_tDBOutput_1OutMain);
						Object columnValue_1_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(1);
						row3.CompanyName = (String) (columnValue_1_tDBOutput_1OutMain);
						Object columnValue_2_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(2);
						row3.ContactName = (String) (columnValue_2_tDBOutput_1OutMain);
						Object columnValue_3_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(3);
						row3.ContactTitle = (String) (columnValue_3_tDBOutput_1OutMain);
						Object columnValue_4_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(4);
						row3.Address = (String) (columnValue_4_tDBOutput_1OutMain);
						Object columnValue_5_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(5);
						row3.City = (String) (columnValue_5_tDBOutput_1OutMain);
						Object columnValue_6_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(6);
						row3.Region = (String) (columnValue_6_tDBOutput_1OutMain);
						Object columnValue_7_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(7);
						row3.PostalCode = (String) (columnValue_7_tDBOutput_1OutMain);
						Object columnValue_8_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(8);
						row3.Country = (String) (columnValue_8_tDBOutput_1OutMain);
						Object columnValue_9_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(9);
						row3.Phone = (String) (columnValue_9_tDBOutput_1OutMain);
						Object columnValue_10_tDBOutput_1OutMain = outgoingEnforcer_tDBOutput_1OutMain.get(10);
						row3.Fax = (String) (columnValue_10_tDBOutput_1OutMain);
					} else {
						row3 = null;
					}

					/**
					 * [tDBOutput_1 process_data_begin ] stop
					 */
// Start of branch "row3"
					if (row3 != null) {

						/**
						 * [tLogRow_2 main ] start
						 */

						currentComponent = "tLogRow_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
						}

///////////////////////		

						strBuffer_tLogRow_2 = new StringBuilder();

						if (row3.CustomerID != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row3.CustomerID));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row3.CompanyName != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row3.CompanyName));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row3.ContactName != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row3.ContactName));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row3.ContactTitle != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row3.ContactTitle));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row3.Address != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row3.Address));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row3.City != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row3.City));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row3.Region != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row3.Region));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row3.PostalCode != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row3.PostalCode));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row3.Country != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row3.Country));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row3.Phone != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row3.Phone));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row3.Fax != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row3.Fax));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_2 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
						}
						consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
						consoleOut_tLogRow_2.flush();
						nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

						tos_count_tLogRow_2++;

						/**
						 * [tLogRow_2 main ] stop
						 */

						/**
						 * [tLogRow_2 process_data_begin ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_2 process_data_end ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_end ] stop
						 */

					} // End of branch "row3"

					/**
					 * [tDBOutput_1 process_data_end ] start
					 */

					currentComponent = "tDBOutput_1";

				} // end of data processing while block
				if (writer_tDBOutput_1 instanceof org.talend.components.api.component.runtime.WriterWithFeedback) {
					((org.talend.components.api.component.runtime.WriterWithFeedback) writer_tDBOutput_1).cleanWrites();
				}

				/**
				 * [tDBOutput_1 process_data_end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

// finally of generic

				if (resourceMap.get("finish_tDBOutput_1") == null) {
					if (resourceMap.get("writer_tDBOutput_1") != null) {
						try {
							((org.talend.components.api.component.runtime.Writer) resourceMap.get("writer_tDBOutput_1"))
									.close();
						} catch (java.io.IOException e_tDBOutput_1) {
							String errorMessage_tDBOutput_1 = "failed to release the resource in tDBOutput_1 :"
									+ e_tDBOutput_1.getMessage();
							System.err.println(errorMessage_tDBOutput_1);
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	private final org.talend.components.common.runtime.SharedConnectionsPool connectionPool = new org.talend.components.common.runtime.SharedConnectionsPool() {
		public java.sql.Connection getDBConnection(String dbDriver, String url, String userName, String password,
				String dbConnectionName) throws ClassNotFoundException, java.sql.SQLException {
			return SharedDBConnection.getDBConnection(dbDriver, url, userName, password, dbConnectionName);
		}

		public java.sql.Connection getDBConnection(String dbDriver, String url, String dbConnectionName)
				throws ClassNotFoundException, java.sql.SQLException {
			return SharedDBConnection.getDBConnection(dbDriver, url, dbConnectionName);
		}
	};

	private static final String GLOBAL_CONNECTION_POOL_KEY = "GLOBAL_CONNECTION_POOL";

	{
		globalMap.put(GLOBAL_CONNECTION_POOL_KEY, connectionPool);
	}

	public static void main(String[] args) {
		final Customers CustomersClass = new Customers();

		int exitCode = CustomersClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Customers.class.getClassLoader()
					.getResourceAsStream("test_talend_big_data/customers_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Customers.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("snowflake_conn", "id_String");
					context.snowflake_conn = (String) context.getProperty("snowflake_conn");
					context.setContextType("snowflake_demo_db_conn", "id_String");
					context.snowflake_demo_db_conn = (String) context.getProperty("snowflake_demo_db_conn");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("snowflake_conn")) {
				context.snowflake_conn = (String) parentContextMap.get("snowflake_conn");
			}
			if (parentContextMap.containsKey("snowflake_demo_db_conn")) {
				context.snowflake_demo_db_conn = (String) parentContextMap.get("snowflake_demo_db_conn");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Customers");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 127673 characters generated by Talend Open Studio for Big Data on the
 * December 22, 2020 12:06:59 PM ICT
 ************************************************************************************************/